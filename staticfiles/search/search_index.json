{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Mikrotik CloudPilot API Documentation","text":"<p>Welcome to the comprehensive documentation for the Mikrotik CloudPilot API - a Django-based system for managing Mikrotik routers with secure user authentication and API key management.</p>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"#1-installation","title":"1. Installation","text":"<pre><code>git clone &lt;repository-url&gt;\ncd Mikrotik-CloudPilotAPI\npython -m venv .venv\nsource .venv/bin/activate\npip install -r requirements.txt\npip install -r requirements-docs.txt\n</code></pre>"},{"location":"#2-setup","title":"2. Setup","text":"<pre><code>python manage.py generate_encryption_key\npython manage.py migrate\n</code></pre>"},{"location":"#3-run","title":"3. Run","text":"<pre><code>python manage.py runserver 8000\nmkdocs serve -a 127.0.0.1:8001\n</code></pre>"},{"location":"#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":""},{"location":"#database-structure","title":"Database Structure","text":"<ul> <li>Single Database: All data stored in <code>db.sqlite3</code></li> <li>User Isolation: Achieved through proper database filtering</li> <li>Standard Django Patterns: Uses Django's built-in ForeignKey relationships</li> </ul>"},{"location":"#authentication-methods","title":"Authentication Methods","text":"<ol> <li>JWT Authentication: Standard login with username/password</li> <li>Dual API Key Authentication: Public + Private key pairs for router access</li> <li>User-Specific Access: Users can only access their own data</li> </ol>"},{"location":"#core-components","title":"Core Components","text":"<ul> <li>User Management: Registration, authentication, profile management</li> <li>Router Management: CRUD operations with encrypted passwords</li> <li>Mikrotik Integration: Connection testing, command execution, device info</li> <li>API Key Management: Automatic generation and rotation</li> </ul>"},{"location":"#documentation-sections","title":"\ud83d\udcd6 Documentation Sections","text":""},{"location":"#setup-guide","title":"Setup Guide","text":"<p>Complete installation and configuration instructions for the CloudPilot API.</p> <p>What you'll learn: - System requirements and prerequisites - Step-by-step installation process - Configuration and environment setup - Troubleshooting common issues</p>"},{"location":"#authentication","title":"Authentication","text":"<p>Comprehensive guide to the dual authentication system.</p> <p>What you'll learn: - JWT token authentication for web applications - Dual API key authentication for scripts and integrations - Security best practices and key management - Authentication flow and error handling</p>"},{"location":"#router-api","title":"Router API","text":"<p>Complete reference for router management operations.</p> <p>What you'll learn: - Router CRUD operations - Connection testing and status monitoring - Custom command execution on Mikrotik devices - Device information retrieval - Error handling and troubleshooting</p>"},{"location":"#payment-credentials","title":"Payment Credentials","text":"<p>Secure management of payment provider API credentials.</p> <p>What you'll learn: - Encrypted storage of private keys for Kopokopo and InstaSend - Secure credential management and verification - Environment support (sandbox/live) - API integration patterns for payment providers</p>"},{"location":"#api-reference","title":"API Reference","text":"<p>Quick reference guide for all API endpoints.</p> <p>What you'll learn: - Complete endpoint listing with HTTP methods - Request/response formats and examples - Authentication requirements for each endpoint - Common use cases and integration patterns</p>"},{"location":"#security-features","title":"\ud83d\udd12 Security Features","text":""},{"location":"#user-data-isolation","title":"User Data Isolation","text":"<ul> <li>Filtered Access: Users can only access their own data through proper database filtering</li> <li>Authentication Required: All endpoints require valid JWT tokens or dual API keys</li> <li>Encrypted Storage: Router passwords encrypted using Fernet encryption</li> </ul>"},{"location":"#authentication-security","title":"Authentication Security","text":"<ul> <li>Dual Key System: Requires both public and private keys for API access</li> <li>JWT Tokens: Secure token-based authentication for web applications</li> <li>Input Validation: Comprehensive validation and sanitization of all inputs</li> </ul>"},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":""},{"location":"#1-setup-the-system","title":"1. Setup the System","text":"<p>Follow the Setup Guide to install and configure the API.</p>"},{"location":"#2-register-a-user","title":"2. Register a User","text":"<p>Create your first user account to get API keys: <pre><code>curl -X POST http://localhost:8000/users/register/ \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"username\": \"your_username\",\n    \"email\": \"your_email@example.com\",\n    \"password\": \"your_secure_password\"\n  }'\n</code></pre></p>"},{"location":"#3-add-your-first-router","title":"3. Add Your First Router","text":"<p>Use the generated API keys to add a Mikrotik router: <pre><code>curl -X POST http://localhost:8000/routers/ \\\n  -H \"X-API-Key: &lt;your_public_key&gt;\" \\\n  -H \"X-Private-Key: &lt;your_private_key&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"My Router\",\n    \"host\": \"192.168.1.1\",\n    \"username\": \"admin\",\n    \"password\": \"router_password\"\n  }'\n</code></pre></p>"},{"location":"#4-test-the-integration","title":"4. Test the Integration","text":"<p>Verify your router connection and try some commands: <pre><code># Test connection\ncurl -X POST http://localhost:8000/routers/1/test-connection/ \\\n  -H \"X-API-Key: &lt;your_public_key&gt;\" \\\n  -H \"X-Private-Key: &lt;your_private_key&gt;\"\n\n# Get device info\ncurl -X GET http://localhost:8000/routers/1/device-info/ \\\n  -H \"X-API-Key: &lt;your_public_key&gt;\" \\\n  -H \"X-Private-Key: &lt;your_private_key&gt;\"\n</code></pre></p>"},{"location":"#development","title":"\ud83d\udd27 Development","text":""},{"location":"#key-design-principles","title":"Key Design Principles","text":"<ul> <li>Separation of Concerns: Clear separation between user management and router operations</li> <li>Simplified Architecture: Single database with proper relationships</li> <li>Flexible Authentication: Support for multiple authentication methods</li> <li>Extensible Design: Easy to add new features and endpoints</li> </ul>"},{"location":"#technology-stack","title":"Technology Stack","text":"<ul> <li>Backend: Django 4.2+ with Django REST Framework</li> <li>Database: SQLite with Django ORM</li> <li>Authentication: JWT + Custom dual API key system</li> <li>Encryption: Fernet (cryptography library)</li> <li>Documentation: MkDocs with Material theme</li> </ul>"},{"location":"#additional-resources","title":"\ud83d\udcda Additional Resources","text":""},{"location":"#api-testing","title":"API Testing","text":"<ul> <li>Use the provided <code>test_router_api.py</code> script to test all endpoints</li> <li>Interactive API documentation available at <code>/openapi.json</code></li> <li>Swagger UI for endpoint exploration</li> </ul>"},{"location":"#error-handling","title":"Error Handling","text":"<ul> <li>Comprehensive error responses with detailed messages</li> <li>HTTP status codes for different error types</li> <li>Debug mode for development troubleshooting</li> </ul>"},{"location":"#performance","title":"Performance","text":"<ul> <li>Single database connection for better performance</li> <li>Efficient querying with proper database filtering</li> <li>Optimized for small to medium-scale deployments</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>This project is designed with maintainability in mind. Key areas for contribution:</p> <ul> <li>API Extensions: Add new router management features</li> <li>Authentication: Enhance security and add new auth methods</li> <li>Documentation: Improve guides and examples</li> <li>Testing: Add comprehensive test coverage</li> <li>Performance: Optimize database queries and API responses</li> </ul>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>See LICENSE file for details.</p> <p>Ready to get started? Begin with the Setup Guide to install and configure your CloudPilot API system.</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>This document provides a quick reference for all API endpoints in the Mikrotik CloudPilot API.</p>"},{"location":"api-reference/#authentication","title":"Authentication","text":"<p>All endpoints require authentication using one of these methods:</p>"},{"location":"api-reference/#method-1-jwt-token","title":"Method 1: JWT Token","text":"<pre><code>Authorization: Bearer &lt;your_jwt_token&gt;\n</code></pre>"},{"location":"api-reference/#method-2-dual-api-keys","title":"Method 2: Dual API Keys","text":"<pre><code>X-API-Key: &lt;your_public_key&gt;\nX-Private-Key: &lt;your_private_key&gt;\n</code></pre>"},{"location":"api-reference/#base-url","title":"Base URL","text":"<pre><code>http://localhost:8000\n</code></pre>"},{"location":"api-reference/#user-management","title":"User Management","text":""},{"location":"api-reference/#register-user","title":"Register User","text":"<pre><code>POST /users/register/\nContent-Type: application/json\n\n{\n    \"username\": \"string\",\n    \"email\": \"string\",\n    \"password\": \"string\"\n}\n</code></pre> <p>Response: <pre><code>{\n    \"message\": \"User registered successfully\",\n    \"user_id\": 1,\n    \"api_key\": {\n        \"public_key\": \"string\",\n        \"message\": \"Store your private key securely \u2014 it won't be shown again.\"\n    },\n    \"note\": \"API keys created automatically\"\n}\n</code></pre></p>"},{"location":"api-reference/#login-user","title":"Login User","text":"<pre><code>POST /users/login/\nContent-Type: application/json\n\n{\n    \"username\": \"string\",\n    \"password\": \"string\"\n}\n</code></pre> <p>Response: <pre><code>{\n    \"access_token\": \"string\",\n    \"refresh_token\": \"string\",\n    \"user_id\": 1,\n    \"username\": \"string\"\n}\n</code></pre></p>"},{"location":"api-reference/#get-user-profile","title":"Get User Profile","text":"<pre><code>GET /users/profile/\nAuthorization: Bearer &lt;jwt_token&gt;\n</code></pre> <p>Response: <pre><code>{\n    \"bio\": \"string\",\n    \"website\": \"string\",\n    \"created_at\": \"datetime\",\n    \"updated_at\": \"datetime\"\n}\n</code></pre></p>"},{"location":"api-reference/#update-user-profile","title":"Update User Profile","text":"<pre><code>PUT /users/profile/\nAuthorization: Bearer &lt;jwt_token&gt;\nContent-Type: application/json\n\n{\n    \"bio\": \"string\",\n    \"website\": \"string\"\n}\n</code></pre>"},{"location":"api-reference/#get-api-keys","title":"Get API Keys","text":"<pre><code>GET /users/api-keys/\nAuthorization: Bearer &lt;jwt_token&gt;\n</code></pre>"},{"location":"api-reference/#generate-new-api-key","title":"Generate New API Key","text":"<pre><code>POST /users/generate-api-key/\nAuthorization: Bearer &lt;jwt_token&gt;\n</code></pre>"},{"location":"api-reference/#rotate-api-keys","title":"Rotate API Keys","text":"<pre><code>POST /users/rotate-api-keys/\nAuthorization: Bearer &lt;jwt_token&gt;\n</code></pre>"},{"location":"api-reference/#router-management","title":"Router Management","text":""},{"location":"api-reference/#list-routers","title":"List Routers","text":"<pre><code>GET /routers/\nAuthorization: Bearer &lt;jwt_token&gt;\n</code></pre> <p>Response: <pre><code>[\n    {\n        \"id\": 1,\n        \"name\": \"string\",\n        \"host\": \"string\",\n        \"port\": 80,\n        \"username\": \"string\",\n        \"use_https\": false,\n        \"is_online\": false,\n        \"last_checked\": \"datetime\",\n        \"created_at\": \"datetime\",\n        \"updated_at\": \"datetime\"\n    }\n]\n</code></pre></p>"},{"location":"api-reference/#create-router","title":"Create Router","text":"<pre><code>POST /routers/\nAuthorization: Bearer &lt;jwt_token&gt;\nContent-Type: application/json\n\n{\n    \"name\": \"string\",\n    \"host\": \"string\",\n    \"port\": 80,\n    \"username\": \"string\",\n    \"password\": \"string\",\n    \"use_https\": false\n}\n</code></pre>"},{"location":"api-reference/#get-router-details","title":"Get Router Details","text":"<pre><code>GET /routers/{id}/\nAuthorization: Bearer &lt;jwt_token&gt;\n</code></pre>"},{"location":"api-reference/#update-router","title":"Update Router","text":"<pre><code>PUT /routers/{id}/\nAuthorization: Bearer &lt;jwt_token&gt;\nContent-Type: application/json\n\n{\n    \"name\": \"string\",\n    \"host\": \"string\",\n    \"port\": 80,\n    \"username\": \"string\",\n    \"password\": \"string\",\n    \"use_https\": false\n}\n</code></pre>"},{"location":"api-reference/#delete-router","title":"Delete Router","text":"<pre><code>DELETE /routers/{id}/\nAuthorization: Bearer &lt;jwt_token&gt;\n</code></pre>"},{"location":"api-reference/#router-operations","title":"Router Operations","text":""},{"location":"api-reference/#test-connection","title":"Test Connection","text":"<pre><code>POST /routers/{id}/test-connection/\nAuthorization: Bearer &lt;jwt_token&gt;\n</code></pre> <p>Response: <pre><code>{\n    \"router_id\": 1,\n    \"is_online\": true,\n    \"message\": \"Connection test completed\"\n}\n</code></pre></p>"},{"location":"api-reference/#execute-command","title":"Execute Command","text":"<pre><code>POST /routers/{id}/execute-command/\nAuthorization: Bearer &lt;jwt_token&gt;\nContent-Type: application/json\n\n{\n    \"command\": \"string\"\n}\n</code></pre> <p>Response: <pre><code>{\n    \"router_id\": 1,\n    \"command\": \"string\",\n    \"result\": \"object\",\n    \"message\": \"Command executed successfully\"\n}\n</code></pre></p>"},{"location":"api-reference/#get-device-info","title":"Get Device Info","text":"<pre><code>GET /routers/{id}/device-info/\nAuthorization: Bearer &lt;jwt_token&gt;\n</code></pre> <p>Response: <pre><code>{\n    \"router_id\": 1,\n    \"device_info\": {\n        \"identity\": \"string\",\n        \"cpu_load\": \"string\",\n        \"free_memory\": \"string\",\n        \"total_memory\": \"string\",\n        \"free_hdd_space\": \"string\",\n        \"total_hdd_space\": \"string\",\n        \"version\": \"string\",\n        \"uptime\": \"string\"\n    },\n    \"message\": \"Device information retrieved successfully\"\n}\n</code></pre></p>"},{"location":"api-reference/#error-responses","title":"Error Responses","text":"<p>All endpoints return consistent error responses:</p>"},{"location":"api-reference/#400-bad-request","title":"400 Bad Request","text":"<pre><code>{\n    \"error\": \"Detailed error description\"\n}\n</code></pre>"},{"location":"api-reference/#401-unauthorized","title":"401 Unauthorized","text":"<pre><code>{\n    \"error\": \"Authentication credentials were not provided or are invalid\"\n}\n</code></pre>"},{"location":"api-reference/#404-not-found","title":"404 Not Found","text":"<pre><code>{\n    \"error\": \"Resource not found\"\n}\n</code></pre>"},{"location":"api-reference/#500-internal-server-error","title":"500 Internal Server Error","text":"<pre><code>{\n    \"error\": \"Internal server error occurred\"\n}\n</code></pre>"},{"location":"api-reference/#setup-commands","title":"Setup Commands","text":""},{"location":"api-reference/#generate-encryption-key","title":"Generate Encryption Key","text":"<pre><code>python manage.py generate_encryption_key\n</code></pre>"},{"location":"api-reference/#run-migrations","title":"Run Migrations","text":"<pre><code>python manage.py migrate\n</code></pre>"},{"location":"api-reference/#example-usage","title":"Example Usage","text":""},{"location":"api-reference/#complete-router-management-flow","title":"Complete Router Management Flow","text":"<ol> <li> <p>Register a user: <pre><code>curl -X POST http://localhost:8000/users/register/ \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"username\": \"testuser\",\n    \"email\": \"test@example.com\",\n    \"password\": \"testpass123\"\n  }'\n</code></pre></p> </li> <li> <p>Login to get JWT token: <pre><code>curl -X POST http://localhost:8000/users/login/ \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"username\": \"testuser\",\n    \"password\": \"testpass123\"\n  }'\n</code></pre></p> </li> <li> <p>Create a router: <pre><code>curl -X POST http://localhost:8000/routers/ \\\n  -H \"Authorization: Bearer &lt;jwt_token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"My Router\",\n    \"host\": \"192.168.1.1\",\n    \"username\": \"admin\",\n    \"password\": \"password123\"\n  }'\n</code></pre></p> </li> <li> <p>Test router connection: <pre><code>curl -X POST http://localhost:8000/routers/1/test-connection/ \\\n  -H \"Authorization: Bearer &lt;jwt_token&gt;\"\n</code></pre></p> </li> <li> <p>Get device information: <pre><code>curl -X GET http://localhost:8000/routers/1/device-info/ \\\n  -H \"Authorization: Bearer &lt;jwt_token&gt;\"\n</code></pre></p> </li> </ol>"},{"location":"api-reference/#using-dual-api-keys","title":"Using Dual API Keys","text":"<p>If you prefer to use API keys instead of JWT tokens:</p> <pre><code>curl -X GET http://localhost:8000/routers/ \\\n  -H \"X-API-Key: &lt;your_public_key&gt;\" \\\n  -H \"X-Private-Key: &lt;your_private_key&gt;\"\n</code></pre>"},{"location":"api-reference/#notes","title":"Notes","text":"<ul> <li>User Isolation: All endpoints automatically filter data based on the authenticated user</li> <li>Password Security: Router passwords are encrypted before storage</li> <li>Authentication: Choose between JWT tokens (web apps) or dual API keys (scripts)</li> <li>Error Handling: All endpoints provide detailed error messages for debugging</li> </ul>"},{"location":"authentication/","title":"Authentication","text":"<p>The Mikrotik CloudPilot API uses a simple, clean JWT authentication system:</p>"},{"location":"authentication/#authentication-flow","title":"Authentication Flow","text":"<ol> <li>Get API Keys: Register a user to receive API keys</li> <li>Login: Use either username/password OR API keys to get JWT tokens</li> <li>Use JWT Tokens: Access all protected endpoints with JWT tokens</li> </ol>"},{"location":"authentication/#login-methods","title":"Login Methods","text":""},{"location":"authentication/#method-1-usernamepassword-login","title":"Method 1: Username/Password Login","text":"<pre><code>POST /users/login/\n</code></pre> <p>Request Body: <pre><code>{\n    \"username\": \"your_username\",\n    \"password\": \"your_password\"\n}\n</code></pre></p>"},{"location":"authentication/#method-2-api-key-login","title":"Method 2: API Key Login","text":"<pre><code>POST /users/api-key-login/\n</code></pre> <p>Request Body: <pre><code>{\n    \"public_key\": \"your_public_api_key\",\n    \"private_key\": \"your_private_api_key\"\n}\n</code></pre></p>"},{"location":"authentication/#login-response","title":"Login Response","text":"<p>Both login methods return the same JWT tokens:</p> <pre><code>{\n    \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\",\n    \"refresh_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\",\n    \"user_id\": 1,\n    \"username\": \"your_username\"\n}\n</code></pre>"},{"location":"authentication/#using-jwt-tokens","title":"Using JWT Tokens","text":"<p>Once you have obtained a JWT token, use it to authenticate all protected requests:</p> <pre><code>Authorization: Bearer &lt;your_jwt_token&gt;\n</code></pre>"},{"location":"authentication/#api-key-management","title":"API Key Management","text":""},{"location":"authentication/#generate-new-api-keys","title":"Generate New API Keys","text":"<pre><code>POST /users/generate-api-key/\nAuthorization: Bearer &lt;your_jwt_token&gt;\n</code></pre>"},{"location":"authentication/#get-current-api-keys","title":"Get Current API Keys","text":"<pre><code>GET /users/api-keys/\nAuthorization: Bearer &lt;your_jwt_token&gt;\n</code></pre>"},{"location":"authentication/#rotate-api-keys","title":"Rotate API Keys","text":"<pre><code>POST /users/rotate-api-keys/\nAuthorization: Bearer &lt;your_jwt_token&gt;\n</code></pre>"},{"location":"authentication/#security-notes","title":"Security Notes","text":"<ol> <li>JWT Tokens: All protected endpoints require JWT tokens</li> <li>API Keys: Used only for initial authentication to obtain JWT tokens</li> <li>Token Expiry: JWT tokens have expiration times for security</li> <li>Private Keys: Store private API keys securely - they're only shown once</li> </ol>"},{"location":"authentication/#example-usage","title":"Example Usage","text":""},{"location":"authentication/#option-1-usernamepassword-login","title":"Option 1: Username/Password Login","text":"<pre><code># Login with username/password\ncurl -X POST http://localhost:8000/users/login/ \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"username\": \"your_username\",\n    \"password\": \"your_password\"\n  }'\n</code></pre>"},{"location":"authentication/#option-2-api-key-login","title":"Option 2: API Key Login","text":"<pre><code># Login with API keys\ncurl -X POST http://localhost:8000/users/api-key-login/ \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"public_key\": \"your_public_key\",\n    \"private_key\": \"your_private_key\"\n  }'\n</code></pre>"},{"location":"authentication/#use-jwt-token-for-all-operations","title":"Use JWT Token for All Operations","text":"<pre><code># Access routers\ncurl -X GET http://localhost:8000/routers/ \\\n  -H \"Authorization: Bearer &lt;jwt_token&gt;\"\n\n# Execute commands\ncurl -X POST http://localhost:8000/routers/1/execute-command/ \\\n  -H \"Authorization: Bearer &lt;jwt_token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"command\": \"system/resource\"}'\n\n# Manage profile\ncurl -X GET http://localhost:8000/users/profile/ \\\n  -H \"Authorization: Bearer &lt;jwt_token&gt;\"\n</code></pre>"},{"location":"authentication/#error-responses","title":"Error Responses","text":""},{"location":"authentication/#invalid-credentials","title":"Invalid Credentials","text":"<pre><code>{\n    \"error\": \"Invalid credentials\"\n}\n</code></pre>"},{"location":"authentication/#invalid-api-keys","title":"Invalid API Keys","text":"<pre><code>{\n    \"error\": \"Invalid API keys\"\n}\n</code></pre>"},{"location":"authentication/#missing-fields","title":"Missing Fields","text":"<pre><code>{\n    \"error\": \"Public key and private key are required\"\n}\n</code></pre>"},{"location":"authentication/#unauthorized-access","title":"Unauthorized Access","text":"<pre><code>{\n    \"detail\": \"Authentication credentials were not provided.\"\n}\n</code></pre>"},{"location":"intasend-payments/","title":"IntaSend Payment Integration","text":"<p>This document provides comprehensive information about the IntaSend payment integration endpoints for processing M-Pesa STK push payments and payment links.</p>"},{"location":"intasend-payments/#overview","title":"Overview","text":"<p>The IntaSend integration provides secure, real-time payment processing capabilities for WiFi packages:</p> <ul> <li>STK Push Payments: Direct M-Pesa mobile money payments via STK push</li> <li>Payment Links: Shareable payment links for customer convenience</li> <li>Real-time Status Updates: Check payment status and update local records</li> <li>Secure Credentials: Encrypted API keys with user-specific access</li> <li>Comprehensive Tracking: Full payment lifecycle with error handling</li> <li>Official SDK: Uses the official IntaSend Python SDK for reliable API integration</li> <li>Payment Provider Tracking: Automatically tracks whether payments are from IntaSend or KopoKopo</li> <li>Smart Status Management: Only calls IntaSend API when payment is still pending</li> <li>Public Key Authentication: Public endpoints for frontend integration without JWT tokens</li> </ul>"},{"location":"intasend-payments/#automatic-credential-management","title":"Automatic Credential Management","text":"<p>The IntaSend API automatically handles all credential management:</p> <ol> <li>Credential Retrieval: When you call any IntaSend endpoint, the system automatically fetches your latest active IntaSend credentials from the database</li> <li>Private Key Decryption: The encrypted private key is automatically decrypted using your Django encryption key</li> <li>Environment Detection: The system automatically detects whether to use sandbox or live IntaSend endpoints</li> <li>SDK Integration: All IntaSend API calls are automatically handled through the official SDK with proper authentication</li> </ol> <p>Benefits: - Simplified Integration: No need to pass credentials in each request - Enhanced Security: Credentials are never exposed in API requests - Automatic Updates: Always uses your latest credentials - Error Prevention: Eliminates credential-related configuration errors - Reliable API: Uses official IntaSend SDK for stable integration</p>"},{"location":"intasend-payments/#prerequisites","title":"Prerequisites","text":""},{"location":"intasend-payments/#1-intasend-account-setup","title":"1. IntaSend Account Setup","text":"<ul> <li>Create an account at IntaSend</li> <li>Generate API keys (public and secret)</li> <li>Configure webhook endpoints (optional)</li> </ul>"},{"location":"intasend-payments/#2-intasend-sdk-installation","title":"2. IntaSend SDK Installation","text":"<p>Install the official IntaSend Python SDK:</p> <pre><code>pip install intasend\n</code></pre> <p>Or add to your requirements: <pre><code>intasend&gt;=1.0.0\n</code></pre></p>"},{"location":"intasend-payments/#3-payment-credentials","title":"3. Payment Credentials","text":"<p>Before using IntaSend endpoints, you must add your IntaSend credentials to the system:</p> <pre><code>POST /payments/credentials/\nAuthorization: Bearer &lt;your_jwt_token&gt;\nContent-Type: application/json\n\n{\n    \"provider\": \"instasend\",\n    \"api_key\": \"your_public_api_key\",\n    \"private_key\": \"your_secret_key\",\n    \"environment\": \"sandbox\"\n}\n</code></pre> <p>Note: Once credentials are added, all IntaSend payment endpoints will automatically fetch and use them. The system automatically: - Retrieves your latest active IntaSend credentials - Decrypts the private key for API authentication - Uses the appropriate environment (sandbox/live) - Handles all credential management internally</p> <p>You don't need to pass credentials in individual payment requests.</p>"},{"location":"intasend-payments/#3-url-configuration-optional","title":"3. URL Configuration (Optional)","text":"<p>The IntaSend integration automatically generates callback, success, and failure URLs. You can customize these URLs by adding the following settings to your Django <code>settings.py</code>:</p> <pre><code># IntaSend URL Configuration\nINTASEND_CALLBACK_URL = \"https://yourdomain.com/payments/webhook/\"\nINTASEND_SUCCESS_URL_BASE = \"https://yourdomain.com/payment/success/\"\nINTASEND_FAIL_URL_BASE = \"https://yourdomain.com/payment/failed/\"\n</code></pre> <p>Note: If you don't configure custom URLs, the system will: 1. Try to detect your domain from <code>django.contrib.sites</code> (if available) 2. Fall back to generic URLs (<code>https://yourdomain.com/...</code>) 3. You can update these URLs later in your production environment</p> <p>Important: If you want to use automatic domain detection, add <code>'django.contrib.sites'</code> to your <code>INSTALLED_APPS</code> in <code>settings.py</code>.</p>"},{"location":"intasend-payments/#quick-fix-for-sites-app-error","title":"Quick Fix for Sites App Error","text":"<p>If you're getting the error: <pre><code>Model class django.contrib.sites.models.Site doesn't declare an explicit app_label and isn't in an application in INSTALLED_APPS\n</code></pre></p> <p>Immediate Solution: Add these settings to your <code>settings.py</code>: <pre><code># IntaSend URL Configuration (add these to avoid sites app dependency)\nINTASEND_CALLBACK_URL = \"https://yourdomain.com/api/payments/webhook/\"\nINTASEND_SUCCESS_URL_BASE = \"https://yourdomain.com/payment/success/\"\nINTASEND_FAIL_URL_BASE = \"https://yourdomain.com/payment/failed/\"\n</code></pre></p> <p>Replace <code>yourdomain.com</code> with your actual domain. This will bypass the sites app dependency entirely.</p>"},{"location":"intasend-payments/#authentication","title":"Authentication","text":"<p>All IntaSend endpoints require JWT authentication:</p> <pre><code>Authorization: Bearer &lt;your_jwt_token&gt;\n</code></pre>"},{"location":"intasend-payments/#public-key-authentication","title":"Public Key Authentication","text":"<p>The IntaSend payment endpoints use a custom authentication system that validates requests using the user's public API key. This allows clients to initiate payments without requiring JWT authentication.</p>"},{"location":"intasend-payments/#how-it-works","title":"How It Works","text":"<ol> <li>Public API Key: Each user has a unique 32-character hexadecimal public API key</li> <li>Header Authentication: The public key is sent in the <code>X-Public-Key</code> header</li> <li>User Lookup: The system looks up the user by their public key</li> <li>Access Control: Only the user who owns the public key can access their payment endpoints</li> </ol>"},{"location":"intasend-payments/#public-endpoints","title":"Public Endpoints","text":"<p>The following endpoints are accessible using public key authentication:</p> <ul> <li><code>POST /payments/intasend/initiate/</code> - Initiate STK push payment</li> <li><code>POST /payments/intasend/{payment_id}/check-status/</code> - Check payment status</li> <li><code>POST /payments/intasend/create-link/</code> - Create payment link</li> </ul>"},{"location":"intasend-payments/#authentication-header","title":"Authentication Header","text":"<pre><code>X-Public-Key: c1eb9fed9dabc57f61d56c26ef3870ae\n</code></pre> <p>Note: The public API key should be exactly 32 characters long and contain only hexadecimal characters (0-9, a-f).</p> <p>Benefits: - Frontend Ready: Perfect for public login pages - No Token Management: Simple public key authentication - Secure: Public key identifies user automatically - Easy Integration: Just add the header to your requests</p>"},{"location":"intasend-payments/#api-endpoints","title":"API Endpoints","text":""},{"location":"intasend-payments/#overview_1","title":"Overview","text":"<p>The IntaSend integration provides secure, real-time payment processing capabilities for WiFi packages:</p> <ul> <li>STK Push Payments: Direct M-Pesa mobile money payments via STK push</li> <li>Payment Links: Shareable payment links for customer convenience</li> <li>Real-time Status Updates: Check payment status and update local records</li> <li>Secure Credentials: Encrypted API keys with user-specific access</li> <li>Comprehensive Tracking: Full payment lifecycle with error handling</li> </ul>"},{"location":"intasend-payments/#automatic-credential-management_1","title":"Automatic Credential Management","text":"<p>The IntaSend API automatically handles all credential management:</p> <ol> <li>Credential Retrieval: When you call any IntaSend endpoint, the system automatically fetches your latest active IntaSend credentials from the database</li> <li>Private Key Decryption: The encrypted private key is automatically decrypted using your Django encryption key</li> <li>Environment Detection: The system automatically detects whether to use sandbox or live IntaSend endpoints</li> <li>SDK Integration: All IntaSend API calls are automatically handled through the official SDK with proper authentication</li> </ol> <p>Benefits: - Simplified Integration: No need to pass credentials in each request - Enhanced Security: Credentials are never exposed in API requests - Automatic Updates: Always uses your latest credentials - Error Prevention: Eliminates credential-related configuration errors - Reliable API: Uses official IntaSend SDK for stable integration</p>"},{"location":"intasend-payments/#available-endpoints","title":"Available Endpoints","text":"Method Endpoint Description POST <code>/payments/intasend/initiate/</code> Initiate STK push payment POST <code>/payments/intasend/{id}/check-status/</code> Check payment status POST <code>/payments/intasend/create-link/</code> Create payment link"},{"location":"intasend-payments/#1-initiate-stk-push-payment","title":"1. Initiate STK Push Payment","text":""},{"location":"intasend-payments/#endpoint","title":"Endpoint","text":"<pre><code>POST /payments/intasend/initiate/\n</code></pre>"},{"location":"intasend-payments/#description","title":"Description","text":"<p>Initiates an M-Pesa STK push payment for a specific WiFi package. This endpoint: - Creates a payment record in the database - Validates package and router ownership - Sends STK push to the customer's phone - Returns payment details with IntaSend information</p>"},{"location":"intasend-payments/#request-body","title":"Request Body","text":"<pre><code>{\n    \"router_id\": 1,\n    \"package_id\": 2,\n    \"phone_number\": \"0712345678\",\n    \"amount\": \"50.00\",\n    \"payment_method\": \"mpesa\",\n    \"mac_address\": \"AA:BB:CC:DD:EE:FF\",\n    \"ip_address\": \"192.168.1.100\"\n}\n</code></pre>"},{"location":"intasend-payments/#required-fields","title":"Required Fields","text":"Field Type Description Validation <code>router_id</code> integer ID of the router Must belong to authenticated user <code>package_id</code> integer ID of the package Must be active and belong to router <code>phone_number</code> string Customer phone number East Africa format (0712345678) <code>amount</code> string Payment amount Must match package price exactly"},{"location":"intasend-payments/#optional-fields","title":"Optional Fields","text":"Field Type Description Default <code>payment_method</code> string Payment method \"mpesa\" <code>mac_address</code> string Device MAC address \"\" <code>ip_address</code> string Device IP address \"\""},{"location":"intasend-payments/#response-format","title":"Response Format","text":"<p>Success Response (201 Created): <pre><code>{\n    \"message\": \"STK push initiated successfully\",\n    \"payment\": {\n        \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n        \"user\": 1,\n        \"router\": 1,\n        \"package\": 2,\n        \"phone_number\": \"0712345678\",\n        \"amount\": \"50.00\",\n        \"currency\": \"KES\",\n        \"payment_method\": \"mpesa\",\n        \"payment_provider\": \"instasend\",\n        \"status\": \"processing\",\n        \"intasend_payment_id\": \"0666538f-9f84-435b-bee7-bb25f23a815f\",\n        \"intasend_invoice_id\": \"Y5JJV4V\",\n        \"intasend_state\": \"PENDING\",\n        \"mac_address\": \"AA:BB:CC:DD:EE:FF\",\n        \"ip_address\": \"192.168.1.100\",\n        \"created_at\": \"2025-08-25T10:30:00Z\",\n        \"updated_at\": \"2025-08-25T10:30:00Z\"\n    },\n    \"intasend\": {\n        \"payment_id\": \"0666538f-9f84-435b-bee7-bb25f23a815f\",\n        \"invoice_id\": \"Y5JJV4V\",\n        \"state\": \"PENDING\",\n        \"message\": \"STK push sent successfully\"\n    }\n}\n</code></pre></p> <p>Error Response (400 Bad Request): <pre><code>{\n    \"error\": \"Amount must match package price: 25.00 KES\",\n    \"payment_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}\n</code></pre></p> <p>Error Response (404 Not Found): <pre><code>{\n    \"error\": \"No active IntaSend credentials found. Please add your IntaSend API credentials first.\"\n}\n</code></pre></p>"},{"location":"intasend-payments/#2-check-payment-status","title":"2. Check Payment Status","text":""},{"location":"intasend-payments/#endpoint_1","title":"Endpoint","text":"<pre><code>POST /payments/intasend/{payment_id}/check-status/\n</code></pre>"},{"location":"intasend-payments/#description_1","title":"Description","text":"<p>Checks the current status of an IntaSend payment and updates the local payment record accordingly. This endpoint: - Retrieves payment status from IntaSend API - Updates local payment status based on IntaSend response - Handles status transitions (pending \u2192 completed/failed) - Returns updated payment information</p>"},{"location":"intasend-payments/#path-parameters","title":"Path Parameters","text":"<ul> <li><code>payment_id</code> (UUID, required): Payment ID to check status for</li> </ul>"},{"location":"intasend-payments/#request-body_1","title":"Request Body","text":"<p><pre><code>{}\n</code></pre> No request body required</p>"},{"location":"intasend-payments/#response-format_1","title":"Response Format","text":"<p>Success Response for Completed Payment (200 OK): <pre><code>{\n    \"message\": \"Payment completed successfully!\",\n    \"payment\": {\n        \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n        \"status\": \"completed\",\n        \"intasend_state\": \"COMPLETE\",\n        \"package_expiry_time\": \"2025-08-26T10:30:00Z\",\n        \"completed_at\": \"2025-08-25T10:35:00Z\",\n        \"updated_at\": \"2025-08-25T10:35:00Z\"\n    },\n    \"status\": \"completed\",\n    \"state\": \"COMPLETE\"\n}\n</code></pre></p> <p>Success Response for Pending Payment (200 OK): <pre><code>{\n    \"message\": \"Payment status checked successfully\",\n    \"payment\": {\n        \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n        \"status\": \"processing\",\n        \"intasend_state\": \"PENDING\",\n        \"updated_at\": \"2025-08-25T10:35:00Z\"\n    },\n    \"status\": \"processing\",\n    \"state\": \"PENDING\",\n    \"details\": {\n        \"amount\": \"50.00\",\n        \"currency\": \"KES\",\n        \"provider\": \"M-PESA\",\n        \"mpesa_reference\": \"ISL_faa26ef9-eb08-4353-b125-ec6a8f022815\"\n    }\n}\n</code></pre></p> <p>Error Response (400 Bad Request): <pre><code>{\n    \"error\": \"This payment was not initiated through IntaSend\"\n}\n</code></pre></p> <p>Error Response (404 Not Found): <pre><code>{\n    \"error\": \"Payment not found or access denied\"\n}\n</code></pre></p>"},{"location":"intasend-payments/#3-create-payment-link","title":"3. Create Payment Link","text":""},{"location":"intasend-payments/#endpoint_2","title":"Endpoint","text":"<pre><code>POST /payments/intasend/create-link/\n</code></pre>"},{"location":"intasend-payments/#description_2","title":"Description","text":"<p>Creates a shareable payment link for a WiFi package. This endpoint: - Creates a payment record in the database - Generates a payment link via IntaSend API - Returns the payment link for customer use - Useful for scenarios where STK push isn't preferred</p>"},{"location":"intasend-payments/#request-body_2","title":"Request Body","text":"<pre><code>{\n    \"router_id\": 1,\n    \"package_id\": 2,\n    \"phone_number\": \"0712345678\",\n    \"amount\": \"50.00\",\n    \"payment_method\": \"mpesa\",\n    \"mac_address\": \"AA:BB:CC:DD:EE:FF\",\n    \"ip_address\": \"192.168.1.100\"\n}\n</code></pre>"},{"location":"intasend-payments/#response-format_2","title":"Response Format","text":"<p>Success Response (201 Created): <pre><code>{\n    \"message\": \"Payment link created successfully\",\n    \"payment\": {\n        \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n        \"status\": \"pending\",\n        \"intasend_invoice_id\": \"invoice_12345\",\n        \"intasend_state\": \"PENDING\"\n    },\n    \"intasend\": {\n        \"payment_url\": \"https://pay.intasend.com/invoice_12345\",\n        \"invoice_id\": \"invoice_12345\",\n        \"state\": \"PENDING\"\n    }\n}\n</code></pre></p>"},{"location":"intasend-payments/#usage-examples","title":"Usage Examples","text":""},{"location":"intasend-payments/#initiate-stk-push-payment","title":"Initiate STK Push Payment","text":"cURLPythonJavaScript <pre><code>curl -X POST http://localhost:8000/payments/intasend/initiate/ \\\n  -H \"Authorization: Bearer &lt;your_jwt_token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"router_id\": 1,\n    \"package_id\": 2,\n    \"phone_number\": \"0712345678\",\n    \"amount\": \"50.00\",\n    \"mac_address\": \"AA:BB:CC:DD:EE:FF\",\n    \"ip_address\": \"192.168.1.100\"\n  }'\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\",\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    \"router_id\": 1,\n    \"package_id\": 2,\n    \"phone_number\": \"0712345678\",\n    \"amount\": \"50.00\",\n    \"mac_address\": \"AA:BB:CC:DD:EE:FF\",\n    \"ip_address\": \"192.168.1.100\"\n}\n\nresponse = requests.post(\n    \"http://localhost:8000/payments/intasend/initiate/\",\n    headers=headers,\n    json=data\n)\n\nif response.status_code == 201:\n    result = response.json()\n    print(f\"STK push initiated: {result['message']}\")\n    print(f\"Payment ID: {result['payment']['id']}\")\n    print(f\"IntaSend ID: {result['intasend']['payment_id']}\")\nelse:\n    print(f\"Error: {response.status_code}\")\n    print(response.json())\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/payments/intasend/initiate/', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        router_id: 1,\n        package_id: 2,\n        phone_number: '0712345678',\n        amount: '50.00',\n        mac_address: 'AA:BB:CC:DD:EE:FF',\n        ip_address: '192.168.1.100'\n    })\n});\n\nif (response.ok) {\n    const result = await response.json();\n    console.log(`STK push initiated: ${result.message}`);\n    console.log(`Payment ID: ${result.payment.id}`);\n    console.log(`IntaSend ID: ${result.intasend.payment_id}`);\n} else {\n    const error = await response.json();\n    console.error(`Error: ${response.status}`, error);\n}\n</code></pre>"},{"location":"intasend-payments/#check-payment-status","title":"Check Payment Status","text":"cURLPythonJavaScript <pre><code>curl -X POST http://localhost:8000/api/payments/intasend/550e8400-e29b-41d4-a716-446655440000/check-status/ \\\n  -H \"Authorization: Bearer &lt;your_jwt_token&gt;\"\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\"\n}\n\npayment_id = \"550e8400-e29b-41d4-a716-446655440000\"\n\nresponse = requests.post(\n    f\"http://localhost:8000/api/payments/intasend/{payment_id}/check-status/\",\n    headers=headers\n)\n\nif response.status_code == 200:\n    result = response.json()\n    print(f\"Status: {result['payment']['status']}\")\n    print(f\"IntaSend State: {result['intasend_status']['state']}\")\nelse:\n    print(f\"Error: {response.status_code}\")\n    print(response.json())\n</code></pre> <pre><code>const paymentId = '550e8400-e29b-41d4-a716-446655440000';\n\nconst response = await fetch(`http://localhost:8000/api/payments/intasend/${paymentId}/check-status/`, {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;'\n    }\n});\n\nif (response.ok) {\n    const result = await response.json();\n    console.log(`Status: ${result.payment.status}`);\n    console.log(`IntaSend State: ${result.intasend_status.state}`);\n} else {\n    const error = await response.json();\n    console.error(`Error: ${response.status}`, error);\n}\n</code></pre>"},{"location":"intasend-payments/#create-payment-link","title":"Create Payment Link","text":"cURLPython <pre><code>curl -X POST http://localhost:8000/api/payments/intasend/create-link/ \\\n  -H \"Authorization: Bearer &lt;your_jwt_token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"router_id\": 1,\n    \"package_id\": 2,\n    \"phone_number\": \"0712345678\",\n    \"amount\": \"50.00\"\n  }'\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\",\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    \"router_id\": 1,\n    \"package_id\": 2,\n    \"phone_number\": \"0712345678\",\n    \"amount\": \"50.00\"\n}\n\nresponse = requests.post(\n    \"http://localhost:8000/api/payments/intasend/create-link/\",\n    headers=headers,\n    json=data\n)\n\nif response.status_code == 201:\n    result = response.json()\n    print(f\"Payment link created: {result['intasend']['payment_url']}\")\n    print(f\"Invoice ID: {result['intasend']['invoice_id']}\")\nelse:\n    print(f\"Error: {response.status_code}\")\n    print(response.json())\n</code></pre>"},{"location":"intasend-payments/#payment-flow","title":"Payment Flow","text":""},{"location":"intasend-payments/#1-stk-push-payment-flow","title":"1. STK Push Payment Flow","text":"<pre><code>Customer Request \u2192 Create Payment \u2192 Initiate STK Push \u2192 Customer Receives STK \u2192 \nPayment Processing \u2192 Status Update \u2192 Package Activation\n</code></pre>"},{"location":"intasend-payments/#2-payment-link-flow","title":"2. Payment Link Flow","text":"<pre><code>Create Payment \u2192 Generate Link \u2192 Share with Customer \u2192 Customer Clicks Link \u2192 \nPayment Processing \u2192 Webhook/Callback \u2192 Status Update \u2192 Package Activation\n</code></pre>"},{"location":"intasend-payments/#status-management","title":"Status Management","text":""},{"location":"intasend-payments/#payment-status-transitions","title":"Payment Status Transitions","text":"<ul> <li>pending \u2192 processing (STK push sent)</li> <li>processing \u2192 completed (payment successful)</li> <li>processing \u2192 failed (payment failed/cancelled)</li> </ul>"},{"location":"intasend-payments/#intasend-state-mapping","title":"IntaSend State Mapping","text":"<ul> <li>PENDING: Payment initiated, waiting for customer action</li> <li>PROCESSING: Payment being processed</li> <li>COMPLETE: Payment successful (IntaSend uses \"COMPLETE\", not \"COMPLETED\")</li> <li>FAILED: Payment failed</li> <li>CANCELLED: Payment cancelled by customer</li> </ul>"},{"location":"intasend-payments/#smart-status-management","title":"Smart Status Management","text":"<p>The system intelligently manages payment status updates:</p> <ol> <li>Completed Payments: Returns simplified success response with package expiry time</li> <li>Pending Payments: Returns detailed response with current status and IntaSend details</li> <li>API Efficiency: Only calls IntaSend API when payment is still pending/processing</li> <li>Automatic Updates: Updates local payment record with IntaSend state changes</li> <li>Package Activation: Automatically calculates package expiry time for completed payments</li> </ol>"},{"location":"intasend-payments/#payment-provider-tracking","title":"Payment Provider Tracking","text":""},{"location":"intasend-payments/#automatic-provider-detection","title":"Automatic Provider Detection","text":"<p>The system automatically tracks which payment provider was used for each transaction:</p> <ul> <li>IntaSend Payments: Automatically set <code>payment_provider = 'instasend'</code></li> <li>KopoKopo Payments: Can be set to <code>payment_provider = 'kopokopo'</code> (future implementation)</li> <li>Provider Validation: Status checks verify the payment was initiated through the correct provider</li> </ul>"},{"location":"intasend-payments/#database-fields","title":"Database Fields","text":"<p>Each payment record includes:</p> Field Description Example <code>payment_provider</code> Payment provider used <code>\"instasend\"</code> <code>intasend_payment_id</code> IntaSend payment reference <code>\"0666538f-9f84-435b-bee7-bb25f23a815f\"</code> <code>intasend_invoice_id</code> IntaSend invoice reference <code>\"Y5JJV4V\"</code> <code>intasend_state</code> Current IntaSend state <code>\"COMPLETE\"</code>, <code>\"PENDING\"</code>, <code>\"FAILED\"</code>"},{"location":"intasend-payments/#benefits","title":"Benefits","text":"<ul> <li>Provider Isolation: Prevents cross-provider status checks</li> <li>Audit Trail: Clear tracking of which provider processed each payment</li> <li>Future Expansion: Easy to add support for additional payment providers</li> <li>Data Integrity: Ensures payment data consistency across providers</li> </ul>"},{"location":"intasend-payments/#error-handling","title":"Error Handling","text":""},{"location":"intasend-payments/#common-error-scenarios","title":"Common Error Scenarios","text":""},{"location":"intasend-payments/#missing-credentials","title":"Missing Credentials","text":"<p><pre><code>{\n    \"error\": \"No active IntaSend credentials found for this user\"\n}\n</code></pre> Solution: Add IntaSend credentials via <code>/api/payments/credentials/</code> with <code>provider: \"instasend\"</code></p>"},{"location":"intasend-payments/#invalid-packagerouter","title":"Invalid Package/Router","text":"<p><pre><code>{\n    \"error\": \"Package not found or not active for this router\"\n}\n</code></pre> Solution: Verify package ID and ensure it's active for the specified router</p>"},{"location":"intasend-payments/#amount-mismatch","title":"Amount Mismatch","text":"<p><pre><code>{\n    \"error\": \"Amount must match package price: 25.00 KES\"\n}\n</code></pre> Solution: Use the exact package price amount</p>"},{"location":"intasend-payments/#phone-number-format","title":"Phone Number Format","text":"<p><pre><code>{\n    \"error\": \"Invalid phone number format\"\n}\n</code></pre> Solution: Use East Africa format (0712345678, 254712345678, etc.)</p>"},{"location":"intasend-payments/#credential-decryption-issues","title":"Credential Decryption Issues","text":"<p><pre><code>{\n    \"error\": \"Failed to decrypt private key: Invalid encryption key\"\n}\n</code></pre> Solution: Check if your encryption key is properly configured in Django settings</p>"},{"location":"intasend-payments/#troubleshooting","title":"Troubleshooting","text":""},{"location":"intasend-payments/#stk-push-not-received","title":"STK Push Not Received","text":"<ol> <li>Check Credentials: Verify IntaSend API keys are correct</li> <li>Phone Number: Ensure phone number is in correct format</li> <li>Network: Check if customer has network coverage</li> <li>Safaricom: Verify customer has M-Pesa account</li> </ol>"},{"location":"intasend-payments/#payment-status-not-updating","title":"Payment Status Not Updating","text":"<ol> <li>API Keys: Check if credentials are active</li> <li>Webhooks: Verify webhook URLs are accessible</li> <li>Manual Check: Use status check endpoint</li> <li>IntaSend Dashboard: Check payment status in IntaSend portal</li> <li>State Values: IntaSend uses \"COMPLETE\" (not \"COMPLETED\")</li> <li>Provider Validation: Ensure payment was initiated through IntaSend</li> </ol>"},{"location":"intasend-payments/#common-issues","title":"Common Issues","text":""},{"location":"intasend-payments/#intasend-state-mismatch","title":"IntaSend State Mismatch","text":"<p>Problem: Payment shows as \"processing\" even when IntaSend shows \"COMPLETE\"</p> <p>Solution: The system now correctly handles IntaSend's \"COMPLETE\" state value. Check that: - Payment has <code>payment_provider = 'instasend'</code> - Both <code>intasend_payment_id</code> and <code>intasend_invoice_id</code> are populated - Status check endpoint is being used correctly</p>"},{"location":"intasend-payments/#payment-provider-errors","title":"Payment Provider Errors","text":"<p>Problem: \"This payment was not initiated through IntaSend\" error</p> <p>Solution: Ensure the payment record has: - <code>payment_provider = 'instasend'</code> - Valid IntaSend credentials in the database - Payment was created using IntaSend endpoints</p>"},{"location":"intasend-payments/#common-issues_1","title":"Common Issues","text":""},{"location":"intasend-payments/#django-sites-app-error","title":"Django Sites App Error","text":"<p>If you see this error: <pre><code>Model class django.contrib.sites.models.Site doesn't declare an explicit app_label and isn't in an application in INSTALLED_APPS\n</code></pre></p> <p>Solution: Add <code>'django.contrib.sites'</code> to your <code>INSTALLED_APPS</code> in <code>settings.py</code>: <pre><code>INSTALLED_APPS = [\n    # ... other apps\n    'django.contrib.sites',\n    # ... your apps\n]\n</code></pre></p> <p>Alternative: Configure custom URLs in settings to avoid the sites dependency: <pre><code>INTASEND_CALLBACK_URL = \"https://yourdomain.com/payments/webhook/\"\nINTASEND_SUCCESS_URL_BASE = \"https://yourdomain.com/payment/success/\"\nINTASEND_FAIL_URL_BASE = \"https://yourdomain.com/payment/failed/\"\n</code></pre></p>"},{"location":"intasend-payments/#sandbox-vs-live-environment","title":"Sandbox vs Live Environment","text":"<ul> <li>Sandbox: Use for testing with test phone numbers</li> <li>Live: Use for production with real M-Pesa accounts</li> <li>Environment Mismatch: Ensure credentials match the environment you're testing</li> </ul>"},{"location":"intasend-payments/#rate-limits","title":"Rate Limits","text":"<ul> <li>API Limits: Respect IntaSend API rate limits</li> <li>Retry Logic: Implement exponential backoff for failed requests</li> <li>Error Handling: Log all API responses for debugging</li> </ul>"},{"location":"intasend-payments/#security-features","title":"Security Features","text":""},{"location":"intasend-payments/#access-control","title":"Access Control","text":"<ul> <li>User Isolation: Users can only access their own payments</li> <li>Router Ownership: Payments must be for routers owned by the user</li> <li>Automatic Credential Management: API keys are automatically fetched and managed</li> </ul>"},{"location":"intasend-payments/#data-validation","title":"Data Validation","text":"<ul> <li>Package Validation: Ensures package is active and belongs to router</li> <li>Amount Validation: Prevents price manipulation</li> <li>Phone Number Formatting: Automatic formatting for IntaSend API</li> </ul>"},{"location":"intasend-payments/#credential-security","title":"Credential Security","text":"<ul> <li>Encrypted Storage: Private keys are encrypted using Fernet encryption</li> <li>Automatic Decryption: Keys are decrypted only when needed for API calls</li> <li>Latest Credentials: System automatically uses the most recent active credentials</li> <li>Environment Isolation: Sandbox and live environments are handled separately</li> </ul>"},{"location":"intasend-payments/#integration-tips","title":"Integration Tips","text":""},{"location":"intasend-payments/#1-webhook-setup","title":"1. Webhook Setup","text":"<p>Configure IntaSend webhooks to automatically update payment status: - URL: `</p>"},{"location":"kopokopo-payments/","title":"Pending","text":""},{"location":"mikrotik-integration/","title":"Mikrotik Integration Guide","text":"<p>This guide explains how to integrate the IntaSend payment system with Mikrotik hotspot for automatic WiFi access after payment.</p>"},{"location":"mikrotik-integration/#overview","title":"Overview","text":"<p>The Mikrotik integration provides a seamless payment-to-access flow:</p> <ol> <li>User connects to WiFi \u2192 Redirected to login page</li> <li>Selects package \u2192 Chooses duration and price</li> <li>Enters phone number \u2192 M-Pesa STK push initiated</li> <li>Completes payment \u2192 IntaSend confirms payment</li> <li>Auto-login \u2192 User automatically connected to WiFi</li> <li>Package activation \u2192 Access granted for selected duration</li> </ol>"},{"location":"mikrotik-integration/#files","title":"Files","text":""},{"location":"mikrotik-integration/#1-basic-login-page","title":"1. Basic Login Page","text":"<ul> <li>File: <code>static/mikrotik-login.html</code></li> <li>Use Case: Simple integration with basic client detection</li> <li>Features: Package selection, phone input, payment processing</li> </ul>"},{"location":"mikrotik-integration/#2-enhanced-login-page","title":"2. Enhanced Login Page","text":"<ul> <li>File: <code>static/mikrotik-login-enhanced.html</code></li> <li>Use Case: Advanced integration with detailed client information</li> <li>Features: Client IP/MAC detection, debug logging, enhanced Mikrotik integration</li> </ul>"},{"location":"mikrotik-integration/#mikrotik-login-pages","title":"Mikrotik Login Pages","text":"<p>The system provides two pre-configured login pages that can be served directly from Django to avoid CORS issues:</p>"},{"location":"mikrotik-integration/#available-login-pages","title":"Available Login Pages","text":"<ol> <li>Basic Login Page: <code>/api/payments/mikrotik-login/</code></li> <li>Simple package selection and payment flow</li> <li>Basic client information detection</li> <li> <p>Suitable for most Mikrotik setups</p> </li> <li> <p>Enhanced Login Page: <code>/api/payments/mikrotik-login-enhanced/</code></p> </li> <li>Advanced client information detection</li> <li>Debug logging and detailed error handling</li> <li>Better integration with Mikrotik parameters</li> </ol>"},{"location":"mikrotik-integration/#accessing-the-login-pages","title":"Accessing the Login Pages","text":"<p>Instead of opening the HTML files directly in your browser (which causes CORS issues), access them through Django:</p> <pre><code># Basic login page\nhttp://yourdomain.com/api/payments/mikrotik-login/\n\n# Enhanced login page  \nhttp://yourdomain.com/api/payments/mikrotik-login-enhanced/\n</code></pre>"},{"location":"mikrotik-integration/#configuration","title":"Configuration","text":"<p>The login pages are automatically configured with: - Your public API key - Relative API paths (no CORS issues) - Default router ID (update in the view if needed)</p>"},{"location":"mikrotik-integration/#customization","title":"Customization","text":"<p>To customize the login pages: 1. Edit the HTML files in the <code>static/</code> directory 2. Update the <code>mikrotik_login_page()</code> and <code>mikrotik_login_enhanced()</code> views in <code>payments/views.py</code> 3. Restart Django to see changes</p>"},{"location":"mikrotik-integration/#setup-instructions","title":"Setup Instructions","text":""},{"location":"mikrotik-integration/#step-1-configure-the-login-page","title":"Step 1: Configure the Login Page","text":"<p>Update the configuration variables in your chosen HTML file:</p> <pre><code>// Configuration - Update these values\nconst API_BASE_URL = 'https://yourdomain.com/api'; // Your Django API domain\nconst ROUTER_ID = 1; // Your router ID from the database\nconst JWT_TOKEN = 'your_jwt_token'; // Valid JWT token for API access\nconst SHOW_DEBUG = true; // Set to false in production\n</code></pre> <p>Required Updates: - <code>API_BASE_URL</code>: Your Django server domain (e.g., <code>https://api.guntu.net</code>) - <code>ROUTER_ID</code>: The router ID from your database - <code>JWT_TOKEN</code>: A valid JWT token with payment permissions</p>"},{"location":"mikrotik-integration/#step-2-upload-to-mikrotik","title":"Step 2: Upload to Mikrotik","text":""},{"location":"mikrotik-integration/#option-a-direct-file-upload","title":"Option A: Direct File Upload","text":"<ol> <li>Access your Mikrotik router via WinBox or SSH</li> <li>Go to Files \u2192 Upload the HTML file</li> <li>Note the file path (e.g., <code>/mikrotik-login.html</code>)</li> </ol>"},{"location":"mikrotik-integration/#option-b-web-server-hosting","title":"Option B: Web Server Hosting","text":"<ol> <li>Host the HTML file on your web server</li> <li>Ensure it's accessible via HTTPS</li> <li>Note the full URL</li> </ol>"},{"location":"mikrotik-integration/#step-3-configure-mikrotik-hotspot","title":"Step 3: Configure Mikrotik Hotspot","text":""},{"location":"mikrotik-integration/#basic-hotspot-configuration","title":"Basic Hotspot Configuration","text":"<pre><code># Enable hotspot\n/ip hotspot setup\n\n# Set hotspot profile\n/ip hotspot profile set [find name=default] \\\n    hotspot-address=192.168.1.0/24 \\\n    dns-name=hotspot.guntu.net \\\n    login-cookie=hotspot\n\n# Configure hotspot server\n/ip hotspot server set [find] \\\n    address=192.168.1.1 \\\n    profile=default \\\n    idle-timeout=5m \\\n    keepalive-timeout=2m \\\n    login-timeout=1m\n</code></pre>"},{"location":"mikrotik-integration/#custom-login-page-configuration","title":"Custom Login Page Configuration","text":"<pre><code># Set custom login page\n/ip hotspot profile set [find name=default] \\\n    login-page=/mikrotik-login.html\n\n# Or for external hosting\n/ip hotspot profile set [find name=default] \\\n    login-page=https://yourdomain.com/mikrotik-login.html\n</code></pre>"},{"location":"mikrotik-integration/#advanced-hotspot-settings","title":"Advanced Hotspot Settings","text":"<pre><code># Configure user profiles\n/ip hotspot user profile add name=1hour rate-limit=1M/1M\n/ip hotspot user profile add name=3hours rate-limit=2M/2M\n/ip hotspot user profile add name=24hours rate-limit=5M/5M\n\n# Set session timeout\n/ip hotspot user profile set [find name=1hour] session-timeout=1:00:00\n/ip hotspot user profile set [find name=3hours] session-timeout=3:00:00\n/ip hotspot user profile set [find name=24hours] session-timeout=24:00:00\n</code></pre>"},{"location":"mikrotik-integration/#step-4-configure-dns-and-network","title":"Step 4: Configure DNS and Network","text":""},{"location":"mikrotik-integration/#dns-configuration","title":"DNS Configuration","text":"<pre><code># Add DNS entry for hotspot\n/ip dns static add name=hotspot.guntu.net address=192.168.1.1\n\n# Configure DNS servers for clients\n/ip hotspot profile set [find name=default] \\\n    dns-server=8.8.8.8,8.8.4.4\n</code></pre>"},{"location":"mikrotik-integration/#network-configuration","title":"Network Configuration","text":"<pre><code># Configure hotspot interface\n/interface bridge add name=hotspot-bridge\n/ip address add address=192.168.1.1/24 interface=hotspot-bridge\n\n# Add wireless interface to bridge\n/interface bridge port add bridge=hotspot-bridge interface=wlan1\n</code></pre>"},{"location":"mikrotik-integration/#client-information-detection","title":"Client Information Detection","text":""},{"location":"mikrotik-integration/#automatic-detection-methods","title":"Automatic Detection Methods","text":"<p>The enhanced login page automatically detects client information:</p>"},{"location":"mikrotik-integration/#1-url-parameters","title":"1. URL Parameters","text":"<p>Mikrotik can pass client information via URL parameters:</p> <pre><code>https://hotspot.guntu.net/login?ip=192.168.1.100&amp;mac=AA:BB:CC:DD:EE:FF&amp;router=AP1\n</code></pre>"},{"location":"mikrotik-integration/#2-mikrotik-variables","title":"2. Mikrotik Variables","text":"<p>Common Mikrotik variables that can be passed:</p> Variable Description Example <code>ip</code> Client IP address <code>192.168.1.100</code> <code>mac</code> Client MAC address <code>AA:BB:CC:DD:EE:FF</code> <code>router</code> Router/AP name <code>AP1</code> <code>ssid</code> WiFi network name <code>Guntu_WiFi</code> <code>user</code> Username (if any) <code>guest</code>"},{"location":"mikrotik-integration/#3-custom-url-configuration","title":"3. Custom URL Configuration","text":"<p>Configure Mikrotik to pass additional parameters:</p> <pre><code># Custom login URL with parameters\n/ip hotspot profile set [find name=default] \\\n    login-page=\"https://yourdomain.com/mikrotik-login.html?ip=${ip}&amp;mac=${mac}&amp;router=${router_name}\"\n</code></pre>"},{"location":"mikrotik-integration/#fallback-detection","title":"Fallback Detection","text":"<p>If Mikrotik doesn't pass parameters, the system uses fallbacks:</p> <pre><code>// Fallback IP detection\nfunction detectLocalIP() {\n    // Returns placeholder IP if detection fails\n    return '192.168.1.100';\n}\n\n// Fallback MAC detection\nfunction detectLocalMAC() {\n    // Returns placeholder MAC if detection fails\n    return 'AA:BB:CC:DD:EE:FF';\n}\n</code></pre>"},{"location":"mikrotik-integration/#package-configuration","title":"Package Configuration","text":""},{"location":"mikrotik-integration/#default-packages","title":"Default Packages","text":"<p>The login page comes with three default packages:</p> Package ID Duration Price Description 1 1 Hour KES 10.00 Fast internet for 1 hour 2 3 Hours KES 25.00 Extended internet access 3 24 Hours KES 50.00 Full day internet access"},{"location":"mikrotik-integration/#customizing-packages","title":"Customizing Packages","text":"<p>To customize packages, update the HTML:</p> <pre><code>&lt;div class=\"package-option\" data-package-id=\"1\" data-price=\"15.00\" data-duration=\"2\"&gt;\n    &lt;div class=\"package-name\"&gt;2 Hours Package&lt;/div&gt;\n    &lt;div class=\"package-details\"&gt;Extended internet access for 2 hours&lt;/div&gt;\n    &lt;div class=\"package-price\"&gt;KES 15.00&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>Important: Package IDs must match those in your Django database.</p>"},{"location":"mikrotik-integration/#package-database-synchronization","title":"Package-Database Synchronization","text":"<p>Ensure your Django packages match the login page:</p> <pre><code># Example package creation\nfrom routers.models import Package, Router\n\nrouter = Router.objects.get(id=1)\nPackage.objects.create(\n    router=router,\n    name=\"1 Hour Package\",\n    package_type=\"hourly\",\n    duration_hours=1,\n    price=10.00,\n    speed_mbps=10,\n    is_active=True\n)\n</code></pre>"},{"location":"mikrotik-integration/#payment-flow-integration","title":"Payment Flow Integration","text":""},{"location":"mikrotik-integration/#1-payment-initiation","title":"1. Payment Initiation","text":"<p>When user clicks \"Pay with M-Pesa\":</p> <pre><code>const paymentData = {\n    router_id: ROUTER_ID,\n    package_id: selectedPackage.id,\n    phone_number: phoneNumber,\n    amount: selectedPackage.price,\n    mac_address: clientInfo.mac,\n    ip_address: clientInfo.ip\n};\n\n// Call IntaSend API\nconst response = await fetch(`${API_BASE_URL}/payments/intasend/initiate/`, {\n    method: 'POST',\n    headers: {\n        'Authorization': `Bearer ${JWT_TOKEN}`,\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(paymentData)\n});\n</code></pre>"},{"location":"mikrotik-integration/#2-status-polling","title":"2. Status Polling","text":"<p>After payment initiation, the system polls for status:</p> <pre><code>async function pollPaymentStatus() {\n    // Check payment status every 3 seconds\n    const response = await fetch(`${API_BASE_URL}/payments/intasend/${currentPayment.id}/check-status/`);\n\n    if (result.status === 'completed') {\n        // Payment successful - auto-login to Mikrotik\n        autoLoginToMikrotik();\n    } else if (result.status === 'failed') {\n        // Payment failed - show error\n        showStatus('Payment failed. Please try again.', 'error');\n    } else {\n        // Still processing - continue polling\n        setTimeout(pollPaymentStatus, 3000);\n    }\n}\n</code></pre>"},{"location":"mikrotik-integration/#3-auto-login","title":"3. Auto-Login","text":"<p>Upon successful payment:</p> <pre><code>function autoLoginToMikrotik() {\n    const currentUrl = window.location.href;\n    const loginUrl = new URL(currentUrl);\n\n    // Add Mikrotik authentication parameters\n    loginUrl.searchParams.set('dst', '/');\n    loginUrl.searchParams.set('popup', 'true');\n    loginUrl.searchParams.set('username', 'guest');\n    loginUrl.searchParams.set('password', 'guest');\n\n    // Redirect to complete login\n    window.location.href = loginUrl.toString();\n}\n</code></pre>"},{"location":"mikrotik-integration/#security-considerations","title":"Security Considerations","text":""},{"location":"mikrotik-integration/#1-jwt-token-management","title":"1. JWT Token Management","text":"<p>Never expose JWT tokens in client-side code in production!</p> <p>Instead, use one of these approaches:</p>"},{"location":"mikrotik-integration/#option-a-server-side-token-generation","title":"Option A: Server-Side Token Generation","text":"<pre><code># Create a view that generates temporary tokens\n@api_view(['POST'])\ndef generate_hotspot_token(request):\n    # Validate request (e.g., check if from Mikrotik)\n    token = AccessToken.for_user(request.user)\n    return Response({'token': str(token)})\n</code></pre>"},{"location":"mikrotik-integration/#option-b-session-based-authentication","title":"Option B: Session-Based Authentication","text":"<pre><code># Use Django sessions instead of JWT\n@api_view(['POST'])\ndef initiate_hotspot_payment(request):\n    if request.session.get('hotspot_authenticated'):\n        # Process payment\n        pass\n</code></pre>"},{"location":"mikrotik-integration/#option-c-ip-based-authentication","title":"Option C: IP-Based Authentication","text":"<pre><code># Allow requests from Mikrotik IP range\nclass MikrotikAuthentication(BaseAuthentication):\n    def authenticate(self, request):\n        client_ip = get_client_ip(request)\n        if client_ip.startswith('192.168.1.'):\n            return (AnonymousUser(), None)\n        return None\n</code></pre>"},{"location":"mikrotik-integration/#2-https-requirements","title":"2. HTTPS Requirements","text":"<ul> <li>Always use HTTPS for production</li> <li>Valid SSL certificate required</li> <li>Secure cookies for session management</li> </ul>"},{"location":"mikrotik-integration/#3-rate-limiting","title":"3. Rate Limiting","text":"<p>Implement rate limiting to prevent abuse:</p> <pre><code>from django_ratelimit.decorators import ratelimit\n\n@ratelimit(key='ip', rate='5/m', method='POST')\n@api_view(['POST'])\ndef initiate_intasend_payment(request):\n    # Payment logic\n    pass\n</code></pre>"},{"location":"mikrotik-integration/#testing-and-debugging","title":"Testing and Debugging","text":""},{"location":"mikrotik-integration/#1-debug-mode","title":"1. Debug Mode","text":"<p>Enable debug mode during development:</p> <pre><code>const SHOW_DEBUG = true; // Set to false in production\n</code></pre> <p>Debug information includes: - Client IP/MAC detection - API request/response data - Payment flow status - Error details</p>"},{"location":"mikrotik-integration/#2-console-logging","title":"2. Console Logging","text":"<p>Check browser console for detailed logs:</p> <pre><code>console.log('Payment initiated:', paymentData);\nconsole.log('API response:', result);\nconsole.log('Client info:', clientInfo);\n</code></pre>"},{"location":"mikrotik-integration/#3-network-tab","title":"3. Network Tab","text":"<p>Monitor API calls in browser DevTools: - Request payloads - Response data - HTTP status codes - Headers</p>"},{"location":"mikrotik-integration/#4-common-issues","title":"4. Common Issues","text":""},{"location":"mikrotik-integration/#payment-not-initiating","title":"Payment Not Initiating","text":"<ul> <li>Check JWT token validity</li> <li>Verify API endpoint URL</li> <li>Check browser console for errors</li> <li>Ensure CORS is configured</li> </ul>"},{"location":"mikrotik-integration/#client-info-not-detected","title":"Client Info Not Detected","text":"<ul> <li>Verify Mikrotik URL parameters</li> <li>Check fallback values</li> <li>Enable debug mode</li> <li>Review network configuration</li> </ul>"},{"location":"mikrotik-integration/#auto-login-not-working","title":"Auto-Login Not Working","text":"<ul> <li>Check Mikrotik login parameters</li> <li>Verify redirect URL format</li> <li>Test with manual login</li> <li>Review hotspot configuration</li> </ul>"},{"location":"mikrotik-integration/#production-deployment","title":"Production Deployment","text":""},{"location":"mikrotik-integration/#1-file-optimization","title":"1. File Optimization","text":"<ul> <li>Minify CSS/JS for faster loading</li> <li>Compress images for bandwidth savings</li> <li>Enable gzip on web server</li> <li>Use CDN for static assets</li> </ul>"},{"location":"mikrotik-integration/#2-security-hardening","title":"2. Security Hardening","text":"<ul> <li>Disable debug mode (<code>SHOW_DEBUG = false</code>)</li> <li>Use secure JWT tokens</li> <li>Implement rate limiting</li> <li>Enable HTTPS only</li> </ul>"},{"location":"mikrotik-integration/#3-monitoring","title":"3. Monitoring","text":"<ul> <li>Log payment attempts</li> <li>Monitor API usage</li> <li>Track success rates</li> <li>Alert on failures</li> </ul>"},{"location":"mikrotik-integration/#4-backup-and-recovery","title":"4. Backup and Recovery","text":"<ul> <li>Regular backups of configuration</li> <li>Version control for login pages</li> <li>Rollback procedures for updates</li> <li>Disaster recovery plan</li> </ul>"},{"location":"mikrotik-integration/#advanced-features","title":"Advanced Features","text":""},{"location":"mikrotik-integration/#1-custom-branding","title":"1. Custom Branding","text":"<p>Update the login page with your branding:</p> <pre><code>.logo {\n    background: linear-gradient(135deg, #your-color1, #your-color2);\n}\n\n.pay-button {\n    background: linear-gradient(135deg, #your-primary, #your-secondary);\n}\n</code></pre>"},{"location":"mikrotik-integration/#2-multi-language-support","title":"2. Multi-Language Support","text":"<p>Add language selection:</p> <pre><code>const languages = {\n    en: { title: 'WiFi Login', subtitle: 'Choose a package...' },\n    sw: { title: 'WiFi Ingia', subtitle: 'Chagua paketi...' }\n};\n\nfunction setLanguage(lang) {\n    document.getElementById('title').textContent = languages[lang].title;\n    document.getElementById('subtitle').textContent = languages[lang].subtitle;\n}\n</code></pre>"},{"location":"mikrotik-integration/#3-analytics-integration","title":"3. Analytics Integration","text":"<p>Track user behavior:</p> <pre><code>// Google Analytics\ngtag('event', 'payment_initiated', {\n    package_id: selectedPackage.id,\n    amount: selectedPackage.price\n});\n\n// Custom tracking\nfetch('/api/analytics/track', {\n    method: 'POST',\n    body: JSON.stringify({\n        action: 'package_selected',\n        package: selectedPackage\n    })\n});\n</code></pre>"},{"location":"mikrotik-integration/#support-and-troubleshooting","title":"Support and Troubleshooting","text":""},{"location":"mikrotik-integration/#1-common-questions","title":"1. Common Questions","text":"<p>Q: How do I change package prices? A: Update both the HTML file and Django database to match.</p> <p>Q: Can I add more payment methods? A: Yes, extend the payment logic to support other providers.</p> <p>Q: How do I customize the design? A: Modify the CSS styles in the HTML file.</p>"},{"location":"mikrotik-integration/#2-getting-help","title":"2. Getting Help","text":"<ul> <li>Documentation: Check this guide and API docs</li> <li>Debug Mode: Enable for detailed error information</li> <li>Console Logs: Check browser developer tools</li> <li>API Testing: Test endpoints with Postman/cURL</li> </ul>"},{"location":"mikrotik-integration/#3-updates-and-maintenance","title":"3. Updates and Maintenance","text":"<ul> <li>Regular Updates: Keep packages and prices current</li> <li>Security Patches: Monitor for security updates</li> <li>Performance Monitoring: Track loading times and success rates</li> <li>User Feedback: Collect and address user concerns</li> </ul>"},{"location":"mikrotik-integration/#conclusion","title":"Conclusion","text":"<p>The Mikrotik integration provides a complete payment-to-access solution for WiFi hotspots. By following this guide, you can:</p> <ol> <li>Deploy the login page on your Mikrotik router</li> <li>Configure packages and pricing</li> <li>Integrate with the IntaSend payment system</li> <li>Automate user access after payment</li> <li>Monitor and maintain the system</li> </ol> <p>For additional support or customization, refer to the API documentation and contact the development team.</p>"},{"location":"packages/","title":"Package Management","text":"<p>This document provides comprehensive information about the Package management system for WiFi internet packages.</p>"},{"location":"packages/#overview","title":"Overview","text":"<p>The Package system allows you to create and manage different WiFi internet packages for each router. Each package defines:</p> <ul> <li>Duration: How long the package is valid (hourly or monthly)</li> <li>Speed Limits: Separate download and upload bandwidth limits</li> <li>Pricing: Cost in Kenyan Shillings (KES)</li> <li>Router Association: Which router the package applies to</li> </ul>"},{"location":"packages/#package-model","title":"Package Model","text":""},{"location":"packages/#core-fields","title":"Core Fields","text":"<pre><code>class Package(models.Model):\n    name = models.CharField(max_length=100)                    # Package name\n    router = models.ForeignKey(Router)                        # Associated router\n    package_type = models.CharField(choices=PACKAGE_TYPES)    # hourly/monthly\n    duration_hours = models.PositiveIntegerField()            # Duration in hours\n    price = models.DecimalField()                             # Price in KES\n    download_speed_mbps = models.PositiveIntegerField()       # Download speed limit\n    upload_speed_mbps = models.PositiveIntegerField()         # Upload speed limit\n    description = models.TextField()                          # Package description\n    is_active = models.BooleanField()                         # Package availability\n    created_at = models.DateTimeField()                       # Creation timestamp\n    updated_at = models.DateTimeField()                       # Update timestamp\n</code></pre>"},{"location":"packages/#package-types","title":"Package Types","text":""},{"location":"packages/#hourly-packages","title":"Hourly Packages","text":"<ul> <li>Duration: 1-24 hours</li> <li>Use Case: Short-term access, pay-per-use</li> <li>Example: 1 hour at 10 Mbps for KES 2.50</li> </ul>"},{"location":"packages/#monthly-packages","title":"Monthly Packages","text":"<ul> <li>Duration: 30 days (720 hours)</li> <li>Use Case: Long-term subscriptions</li> <li>Example: 1 month at 100 Mbps for KES 150.00</li> </ul>"},{"location":"packages/#speed-limits","title":"Speed Limits","text":""},{"location":"packages/#download-speed","title":"Download Speed","text":"<ul> <li>Field: <code>download_speed_mbps</code></li> <li>Unit: Megabits per second (Mbps)</li> <li>Range: 1 Mbps to 10,000+ Mbps</li> <li>Display: Automatically converts to Gbps for high speeds</li> </ul>"},{"location":"packages/#upload-speed","title":"Upload Speed","text":"<ul> <li>Field: <code>upload_speed_mbps</code></li> <li>Unit: Megabits per second (Mbps)</li> <li>Range: 1 Mbps to 10,000+ Mbps</li> <li>Display: Automatically converts to Gbps for high speeds</li> </ul>"},{"location":"packages/#combined-display","title":"Combined Display","text":"<p>The system automatically generates human-readable speed displays: - Low Speed: \"10 Mbps / 5 Mbps\" - High Speed: \"1.0 Gbps / 500 Mbps\"</p>"},{"location":"packages/#validation-rules","title":"Validation Rules","text":""},{"location":"packages/#package-name","title":"Package Name","text":"<ul> <li>Uniqueness: Must be unique per router</li> <li>Length: Maximum 100 characters</li> <li>Format: Human-readable names (e.g., \"Basic Hourly\", \"Premium Monthly\")</li> </ul>"},{"location":"packages/#duration","title":"Duration","text":"<ul> <li>Minimum: 1 hour</li> <li>Maximum: No upper limit (practical limit around 8760 hours = 1 year)</li> <li>Calculation: Monthly packages use 720 hours (30 days \u00d7 24 hours)</li> </ul>"},{"location":"packages/#pricing","title":"Pricing","text":"<ul> <li>Minimum: KES 0.01</li> <li>Currency: Kenyan Shillings (KES)</li> <li>Decimal Places: 2 decimal places supported</li> </ul>"},{"location":"packages/#speed-limits_1","title":"Speed Limits","text":"<ul> <li>Minimum: 1 Mbps</li> <li>Maximum: No upper limit (practical limit around 10,000 Mbps)</li> <li>Symmetry: Download and upload can be different</li> </ul>"},{"location":"packages/#admin-interface","title":"Admin Interface","text":""},{"location":"packages/#package-admin-features","title":"Package Admin Features","text":""},{"location":"packages/#list-display","title":"List Display","text":"<ul> <li>Package name and router</li> <li>Package type and duration</li> <li>Price and speed limits</li> <li>Active status and creation date</li> </ul>"},{"location":"packages/#filtering-options","title":"Filtering Options","text":"<ul> <li>By router</li> <li>By package type (hourly/monthly)</li> <li>By active status</li> <li>By creation/update dates</li> </ul>"},{"location":"packages/#search-capabilities","title":"Search Capabilities","text":"<ul> <li>Package name</li> <li>Description</li> <li>Router name</li> </ul>"},{"location":"packages/#field-organization","title":"Field Organization","text":"<ol> <li>Basic Information: Name, router, type, description, status</li> <li>Package Details: Duration, price</li> <li>Speed Limits: Download/upload speeds with display properties</li> <li>Metadata: Creation/update timestamps</li> </ol>"},{"location":"packages/#admin-actions","title":"Admin Actions","text":""},{"location":"packages/#create-package","title":"Create Package","text":"<ol> <li>Navigate to Routers &gt; Packages</li> <li>Click Add Package</li> <li>Fill in required fields:</li> <li>Name: Unique package name</li> <li>Router: Select from available routers</li> <li>Type: Hourly or Monthly</li> <li>Duration: Hours (1 for hourly, 720 for monthly)</li> <li>Price: Amount in KES</li> <li>Speeds: Download and upload limits</li> <li>Description: Optional details</li> <li>Click Save</li> </ol>"},{"location":"packages/#edit-package","title":"Edit Package","text":"<ol> <li>Find the package in the list</li> <li>Click on the package name</li> <li>Modify desired fields</li> <li>Click Save</li> </ol>"},{"location":"packages/#deactivate-package","title":"Deactivate Package","text":"<ol> <li>Edit the package</li> <li>Uncheck Is Active</li> <li>Save changes</li> </ol> <p>Note: Deactivating a package prevents new purchases but doesn't affect existing active subscriptions.</p>"},{"location":"packages/#business-logic","title":"Business Logic","text":""},{"location":"packages/#package-lifecycle","title":"Package Lifecycle","text":""},{"location":"packages/#creation","title":"Creation","text":"<ol> <li>Setup: Admin creates package with router association</li> <li>Configuration: Set duration, pricing, and speed limits</li> <li>Activation: Mark package as active for customer purchase</li> </ol>"},{"location":"packages/#active-period","title":"Active Period","text":"<ol> <li>Available: Customers can see and purchase the package</li> <li>Purchased: Payment creates a Payment record</li> <li>Active: Customer has internet access until expiry</li> </ol>"},{"location":"packages/#expiry","title":"Expiry","text":"<ol> <li>Expired: Package access ends automatically</li> <li>Renewal: Customer can purchase the same or different package</li> </ol>"},{"location":"packages/#speed-management","title":"Speed Management","text":""},{"location":"packages/#bandwidth-control","title":"Bandwidth Control","text":"<ul> <li>Download Limit: Controls how fast customers can download</li> <li>Upload Limit: Controls how fast customers can upload</li> <li>Asymmetric: Common to have higher download than upload speeds</li> </ul>"},{"location":"packages/#speed-examples","title":"Speed Examples","text":"<ul> <li>Basic: 10 Mbps down / 5 Mbps up</li> <li>Standard: 25 Mbps down / 10 Mbps up</li> <li>Premium: 100 Mbps down / 50 Mbps up</li> <li>Ultra: 1 Gbps down / 500 Mbps up</li> </ul>"},{"location":"packages/#pricing-strategy","title":"Pricing Strategy","text":""},{"location":"packages/#hourly-packages_1","title":"Hourly Packages","text":"<ul> <li>Target: Casual users, short-term access</li> <li>Pricing: Higher per-hour cost</li> <li>Example: 1 hour at 10 Mbps for KES 2.50</li> </ul>"},{"location":"packages/#monthly-packages_1","title":"Monthly Packages","text":"<ul> <li>Target: Regular users, long-term access</li> <li>Pricing: Lower per-hour cost</li> <li>Example: 720 hours at 100 Mbps for KES 150.00</li> </ul>"},{"location":"packages/#api-endpoints","title":"API Endpoints","text":""},{"location":"packages/#overview_1","title":"Overview","text":"<p>The Package system provides API endpoints for retrieving package information. All endpoints require JWT authentication and provide user-specific data access.</p>"},{"location":"packages/#authentication","title":"Authentication","text":"<p>All package endpoints require authentication using JWT tokens:</p> <pre><code>Authorization: Bearer &lt;your_jwt_token&gt;\n</code></pre> <p>How to get JWT tokens: 1. Username/Password: <code>POST /users/login/</code> 2. API Keys: <code>POST /users/api-key-login/</code> (requires both public and private keys)</p>"},{"location":"packages/#available-endpoints","title":"Available Endpoints","text":"Method Endpoint Description GET <code>/routers/{id}/packages/</code> Get packages for a specific router GET <code>/routers/packages/</code> List all packages from user's routers POST <code>/routers/packages/</code> Create a new package GET <code>/routers/packages/{id}/</code> Get package details PUT <code>/routers/packages/{id}/</code> Update package configuration DELETE <code>/routers/packages/{id}/</code> Delete a package"},{"location":"packages/#get-router-packages","title":"Get Router Packages","text":""},{"location":"packages/#endpoint","title":"Endpoint","text":"<pre><code>GET /routers/{id}/packages/\n</code></pre>"},{"location":"packages/#description","title":"Description","text":"<p>Retrieve all active packages available for a specific router. This endpoint returns comprehensive package information including speed limits, pricing, and duration details.</p>"},{"location":"packages/#path-parameters","title":"Path Parameters","text":"<ul> <li><code>id</code> (integer, required): Router ID to get packages for</li> </ul>"},{"location":"packages/#request-headers","title":"Request Headers","text":"<pre><code>Authorization: Bearer &lt;your_jwt_token&gt;\nContent-Type: application/json\n</code></pre>"},{"location":"packages/#response-format","title":"Response Format","text":"<p>Success Response (200 OK): <pre><code>{\n    \"router_id\": 1,\n    \"router_name\": \"Office Router\",\n    \"packages\": [\n        {\n            \"id\": 1,\n            \"name\": \"Basic Hourly\",\n            \"package_type\": \"hourly\",\n            \"package_type_display\": \"Hourly Package\",\n            \"duration_hours\": 1,\n            \"duration_display\": \"1 hour\",\n            \"price\": \"2.50\",\n            \"currency\": \"KES\",\n            \"download_speed_mbps\": 10,\n            \"upload_speed_mbps\": 5,\n            \"download_speed_display\": \"10 Mbps\",\n            \"upload_speed_display\": \"5 Mbps\",\n            \"speed_display\": \"10 Mbps / 5 Mbps\",\n            \"description\": \"Basic internet access for 1 hour\",\n            \"is_active\": true\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Premium Monthly\",\n            \"package_type\": \"monthly\",\n            \"package_type_display\": \"Monthly Package\",\n            \"duration_hours\": 720,\n            \"duration_display\": \"1 month\",\n            \"price\": \"150.00\",\n            \"currency\": \"KES\",\n            \"download_speed_mbps\": 100,\n            \"upload_speed_mbps\": 50,\n            \"download_speed_display\": \"100 Mbps\",\n            \"upload_speed_display\": \"50 Mbps\",\n            \"speed_display\": \"100 Mbps / 50 Mbps\",\n            \"description\": \"High-speed internet for 1 month\",\n            \"is_active\": true\n        }\n    ],\n    \"message\": \"Found 2 active packages for Office Router\"\n}\n</code></pre></p> <p>Error Response (404 Not Found): <pre><code>{\n    \"error\": \"Router not found or access denied\"\n}\n</code></pre></p> <p>Error Response (401 Unauthorized): <pre><code>{\n    \"detail\": \"Authentication credentials were not provided.\"\n}\n</code></pre></p>"},{"location":"packages/#package-crud-operations","title":"Package CRUD Operations","text":""},{"location":"packages/#listcreate-packages","title":"List/Create Packages","text":"<pre><code>GET/POST /routers/packages/\n</code></pre>"},{"location":"packages/#description_1","title":"Description","text":"<p>GET: List all packages from routers owned by the authenticated user POST: Create a new package for a router owned by the user</p>"},{"location":"packages/#request-headers_1","title":"Request Headers","text":"<pre><code>Authorization: Bearer &lt;your_jwt_token&gt;\nContent-Type: application/json\n</code></pre>"},{"location":"packages/#post-request-body","title":"POST Request Body","text":"<pre><code>{\n    \"name\": \"Basic Hourly\",\n    \"router\": 1,\n    \"package_type\": \"hourly\",\n    \"duration_hours\": 1,\n    \"price\": \"2.50\",\n    \"download_speed_mbps\": 10,\n    \"upload_speed_mbps\": 5,\n    \"description\": \"Basic internet access for 1 hour\",\n    \"is_active\": true\n}\n</code></pre>"},{"location":"packages/#response-format_1","title":"Response Format","text":"<p>GET Response (200 OK): <pre><code>[\n    {\n        \"id\": 1,\n        \"name\": \"Basic Hourly\",\n        \"router\": 1,\n        \"router_name\": \"Office Router\",\n        \"package_type\": \"hourly\",\n        \"package_type_display\": \"Hourly Package\",\n        \"duration_hours\": 1,\n        \"duration_display\": \"1 hour\",\n        \"price\": \"2.50\",\n        \"download_speed_mbps\": 10,\n        \"upload_speed_mbps\": 5,\n        \"download_speed_display\": \"10 Mbps\",\n        \"upload_speed_display\": \"5 Mbps\",\n        \"speed_display\": \"10 Mbps / 5 Mbps\",\n        \"description\": \"Basic internet access for 1 hour\",\n        \"is_active\": true,\n        \"created_at\": \"2025-08-13T13:19:26Z\",\n        \"updated_at\": \"2025-08-13T13:19:26Z\"\n    }\n]\n</code></pre></p> <p>POST Success Response (201 Created): <pre><code>{\n    \"id\": 2,\n    \"name\": \"Premium Monthly\",\n    \"router\": 1,\n    \"router_name\": \"Office Router\",\n    \"package_type\": \"monthly\",\n    \"package_type_display\": \"Monthly Package\",\n    \"duration_hours\": 720,\n    \"duration_display\": \"1 month\",\n    \"price\": \"150.00\",\n    \"download_speed_mbps\": 100,\n    \"upload_speed_mbps\": 50,\n    \"download_speed_display\": \"100 Mbps\",\n    \"upload_speed_display\": \"50 Mbps\",\n    \"speed_display\": \"100 Mbps / 50 Mbps\",\n    \"description\": \"High-speed internet for 1 month\",\n    \"is_active\": true,\n    \"created_at\": \"2025-08-13T14:30:00Z\",\n    \"updated_at\": \"2025-08-13T14:30:00Z\"\n}\n</code></pre></p> <p>POST Error Response (400 Bad Request): <pre><code>{\n    \"name\": [\n        \"A package with name 'Basic Hourly' already exists for this router.\"\n    ],\n    \"price\": [\n        \"Price must be greater than 0.\"\n    ]\n}\n</code></pre></p>"},{"location":"packages/#package-details","title":"Package Details","text":"<pre><code>GET/PUT/DELETE /routers/packages/{id}/\n</code></pre>"},{"location":"packages/#description_2","title":"Description","text":"<p>GET: Get package details PUT: Update package configuration DELETE: Remove package</p>"},{"location":"packages/#path-parameters_1","title":"Path Parameters","text":"<ul> <li><code>id</code> (integer, required): Package ID to operate on</li> </ul>"},{"location":"packages/#put-request-body","title":"PUT Request Body","text":"<pre><code>{\n    \"name\": \"Updated Package Name\",\n    \"price\": \"3.00\",\n    \"download_speed_mbps\": 15,\n    \"upload_speed_mbps\": 8,\n    \"description\": \"Updated package description\"\n}\n</code></pre>"},{"location":"packages/#response-format_2","title":"Response Format","text":"<p>GET Response (200 OK): <pre><code>{\n    \"id\": 1,\n    \"name\": \"Basic Hourly\",\n    \"router\": 1,\n    \"router_name\": \"Office Router\",\n    \"package_type\": \"hourly\",\n    \"package_type_display\": \"Hourly Package\",\n    \"duration_hours\": 1,\n    \"duration_display\": \"1 hour\",\n    \"price\": \"2.50\",\n    \"download_speed_mbps\": 10,\n    \"upload_speed_mbps\": 5,\n    \"download_speed_display\": \"10 Mbps\",\n    \"upload_speed_display\": \"5 Mbps\",\n    \"speed_display\": \"10 Mbps / 5 Mbps\",\n    \"description\": \"Basic internet access for 1 hour\",\n    \"is_active\": true,\n    \"created_at\": \"2025-08-13T13:19:26Z\",\n    \"updated_at\": \"2025-08-13T13:19:26Z\"\n}\n</code></pre></p> <p>PUT Response (200 OK): <pre><code>{\n    \"id\": 1,\n    \"name\": \"Updated Package Name\",\n    \"router\": 1,\n    \"router_name\": \"Office Router\",\n    \"package_type\": \"hourly\",\n    \"package_type_display\": \"Hourly Package\",\n    \"duration_hours\": 1,\n    \"duration_display\": \"1 hour\",\n    \"price\": \"3.00\",\n    \"download_speed_mbps\": 15,\n    \"upload_speed_mbps\": 8,\n    \"download_speed_display\": \"15 Mbps\",\n    \"upload_speed_display\": \"8 Mbps\",\n    \"speed_display\": \"15 Mbps / 8 Mbps\",\n    \"description\": \"Updated package description\",\n    \"is_active\": true,\n    \"created_at\": \"2025-08-13T13:19:26Z\",\n    \"updated_at\": \"2025-08-13T14:45:00Z\"\n}\n</code></pre></p> <p>DELETE Response (200 OK): <pre><code>{\n    \"message\": \"Package \\\"Updated Package Name\\\" has been successfully deleted\"\n}\n</code></pre></p>"},{"location":"packages/#response-fields","title":"Response Fields","text":"Field Type Description <code>router_id</code> integer ID of the router <code>router_name</code> string Name of the router <code>packages</code> array Array of package objects <code>message</code> string Summary message"},{"location":"packages/#package-object-fields","title":"Package Object Fields","text":"Field Type Description <code>id</code> integer Unique package identifier <code>name</code> string Package name <code>package_type</code> string Package type (hourly/monthly) <code>package_type_display</code> string Human-readable package type <code>duration_hours</code> integer Duration in hours <code>duration_display</code> string Human-readable duration <code>price</code> string Price in KES (decimal as string) <code>currency</code> string Currency code (KES) <code>download_speed_mbps</code> integer Download speed limit in Mbps <code>upload_speed_mbps</code> integer Upload speed limit in Mbps <code>download_speed_display</code> string Human-readable download speed <code>upload_speed_display</code> string Human-readable upload speed <code>speed_display</code> string Combined speed display <code>description</code> string Package description <code>is_active</code> boolean Whether package is available"},{"location":"packages/#usage-examples","title":"Usage Examples","text":""},{"location":"packages/#get-packages-for-a-router","title":"Get Packages for a Router","text":"cURLPythonJavaScript <pre><code>curl -X GET http://localhost:8000/routers/1/packages/ \\\n  -H \"Authorization: Bearer &lt;your_jwt_token&gt;\"\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\"\n}\n\nresponse = requests.get(\n    \"http://localhost:8000/routers/1/packages/\",\n    headers=headers\n)\n\nif response.status_code == 200:\n    packages = response.json()\n    print(f\"Found {len(packages['packages'])} packages for {packages['router_name']}\")\n\n    for package in packages['packages']:\n        print(f\"- {package['name']}: {package['speed_display']} for {package['duration_display']} at {package['price']} {package['currency']}\")\nelse:\n    print(f\"Error: {response.status_code}\")\n    print(response.json())\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/routers/1/packages/', {\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;'\n    }\n});\n\nif (response.ok) {\n    const packages = await response.json();\n    console.log(`Found ${packages.packages.length} packages for ${packages.router_name}`);\n\n    packages.packages.forEach(package =&gt; {\n        console.log(`- ${package.name}: ${package.speed_display} for ${package.duration_display} at ${package.price} ${package.currency}`);\n    });\n} else {\n    const error = await response.json();\n    console.error(`Error: ${response.status}`, error);\n}\n</code></pre>"},{"location":"packages/#filter-packages-by-type","title":"Filter Packages by Type","text":"PythonJavaScript <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\"\n}\n\nresponse = requests.get(\n    \"http://localhost:8000/routers/1/packages/\",\n    headers=headers\n)\n\nif response.status_code == 200:\n    packages = response.json()\n\n    # Filter hourly packages\n    hourly_packages = [p for p in packages['packages'] if p['package_type'] == 'hourly']\n    print(f\"Found {len(hourly_packages)} hourly packages\")\n\n    # Filter monthly packages\n    monthly_packages = [p for p in packages['packages'] if p['package_type'] == 'monthly']\n    print(f\"Found {len(monthly_packages)} monthly packages\")\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/routers/1/packages/', {\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;'\n    }\n});\n\nif (response.ok) {\n    const packages = await response.json();\n\n    // Filter hourly packages\n    const hourlyPackages = packages.packages.filter(p =&gt; p.package_type === 'hourly');\n    console.log(`Found ${hourlyPackages.length} hourly packages`);\n\n    // Filter monthly packages\n    const monthlyPackages = packages.packages.filter(p =&gt; p.package_type === 'monthly');\n    console.log(`Found ${monthlyPackages.length} monthly packages`);\n}\n</code></pre>"},{"location":"packages/#find-packages-by-speed-range","title":"Find Packages by Speed Range","text":"PythonJavaScript <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\"\n}\n\nresponse = requests.get(\n    \"http://localhost:8000/routers/1/packages/\",\n    headers=headers\n)\n\nif response.status_code == 200:\n    packages = response.json()\n\n    # Find packages with download speed &gt;= 50 Mbps\n    fast_packages = [p for p in packages['packages'] if p['download_speed_mbps'] &gt;= 50]\n    print(f\"Found {len(fast_packages)} packages with 50+ Mbps download\")\n\n    # Find packages within price range\n    affordable_packages = [p for p in packages['packages'] if float(p['price']) &lt;= 100.0]\n    print(f\"Found {len(affordable_packages)} packages under KES 100\")\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/routers/1/packages/', {\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;'\n    }\n});\n\nif (response.ok) {\n    const packages = await response.json();\n\n    // Find packages with download speed &gt;= 50 Mbps\n    const fastPackages = packages.packages.filter(p =&gt; p.download_speed_mbps &gt;= 50);\n    console.log(`Found ${fastPackages.length} packages with 50+ Mbps download`);\n\n    // Find packages within price range\n    const affordablePackages = packages.packages.filter(p =&gt; parseFloat(p.price) &lt;= 100.0);\n    console.log(`Found ${affordablePackages.length} packages under KES 100`);\n}\n</code></pre>"},{"location":"packages/#create-a-new-package","title":"Create a New Package","text":"cURLPythonJavaScript <pre><code>curl -X POST http://localhost:8000/routers/packages/ \\\n  -H \"Authorization: Bearer &lt;your_jwt_token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Basic Hourly\",\n    \"router\": 1,\n    \"package_type\": \"hourly\",\n    \"duration_hours\": 1,\n    \"price\": \"2.50\",\n    \"download_speed_mbps\": 10,\n    \"upload_speed_mbps\": 5,\n    \"description\": \"Basic internet access for 1 hour\",\n    \"is_active\": true\n  }'\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\",\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    \"name\": \"Basic Hourly\",\n    \"router\": 1,\n    \"package_type\": \"hourly\",\n    \"duration_hours\": 1,\n    \"price\": \"2.50\",\n    \"download_speed_mbps\": 10,\n    \"upload_speed_mbps\": 5,\n    \"description\": \"Basic internet access for 1 hour\",\n    \"is_active\": True\n}\n\nresponse = requests.post(\n    \"http://localhost:8000/routers/packages/\",\n    headers=headers,\n    json=data\n)\n\nif response.status_code == 201:\n    package = response.json()\n    print(f\"Created package: {package['name']} with ID {package['id']}\")\nelse:\n    print(f\"Error: {response.status_code}\")\n    print(response.json())\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/routers/packages/', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        name: 'Basic Hourly',\n        router: 1,\n        package_type: 'hourly',\n        duration_hours: 1,\n        price: '2.50',\n        download_speed_mbps: 10,\n        upload_speed_mbps: 5,\n        description: 'Basic internet access for 1 hour',\n        is_active: true\n    })\n});\n\nif (response.ok) {\n    const package = await response.json();\n    console.log(`Created package: ${package.name} with ID ${package.id}`);\n} else {\n    const error = await response.json();\n    console.error(`Error: ${response.status}`, error);\n}\n</code></pre>"},{"location":"packages/#update-package-details","title":"Update Package Details","text":"cURLPythonJavaScript <pre><code>curl -X PUT http://localhost:8000/routers/packages/1/ \\\n  -H \"Authorization: Bearer &lt;your_jwt_token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Updated Package Name\",\n    \"price\": \"3.00\",\n    \"download_speed_mbps\": 15,\n    \"upload_speed_mbps\": 8,\n    \"description\": \"Updated package description\"\n  }'\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\",\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    \"name\": \"Updated Package Name\",\n    \"price\": \"3.00\",\n    \"download_speed_mbps\": 15,\n    \"upload_speed_mbps\": 8,\n    \"description\": \"Updated package description\"\n}\n\nresponse = requests.put(\n    \"http://localhost:8000/routers/packages/1/\",\n    headers=headers,\n    json=data\n)\n\nif response.status_code == 200:\n    package = response.json()\n    print(f\"Updated package: {package['name']}\")\n    print(f\"New price: {package['price']} KES\")\n    print(f\"New speed: {package['speed_display']}\")\nelse:\n    print(f\"Error: {response.status_code}\")\n    print(response.json())\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/routers/packages/1/', {\n    method: 'PUT',\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        name: 'Updated Package Name',\n        price: '3.00',\n        download_speed_mbps: 15,\n        upload_speed_mbps: 8,\n        description: 'Updated package description'\n    })\n});\n\nif (response.ok) {\n    const package = await response.json();\n    console.log(`Updated package: ${package.name}`);\n    console.log(`New price: ${package.price} KES`);\n    console.log(`New speed: ${package.speed_display}`);\n} else {\n    const error = await response.json();\n    console.error(`Error: ${response.status}`, error);\n}\n</code></pre>"},{"location":"packages/#delete-a-package","title":"Delete a Package","text":"cURLPythonJavaScript <pre><code>curl -X DELETE http://localhost:8000/routers/packages/1/ \\\n  -H \"Authorization: Bearer &lt;your_jwt_token&gt;\"\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\"\n}\n\nresponse = requests.delete(\n    \"http://localhost:8000/routers/packages/1/\",\n    headers=headers\n)\n\nif response.status_code == 200:\n    result = response.json()\n    print(f\"Delete message: {result['message']}\")\nelse:\n    print(f\"Error: {response.status_code}\")\n    print(response.json())\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/routers/packages/1/', {\n    method: 'DELETE',\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;'\n    }\n});\n\nif (response.ok) {\n    const result = await response.json();\n    console.log(`Delete message: ${result.message}`);\n} else {\n    const error = await response.json();\n    console.error(`Error: ${response.status}`, error);\n}\n</code></pre>"},{"location":"packages/#list-all-packages","title":"List All Packages","text":"cURLPythonJavaScript <pre><code>curl -X GET http://localhost:8000/routers/packages/ \\\n  -H \"Authorization: Bearer &lt;your_jwt_token&gt;\"\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\"\n}\n\nresponse = requests.get(\n    \"http://localhost:8000/routers/packages/\",\n    headers=headers\n)\n\nif response.status_code == 200:\n    packages = response.json()\n    print(f\"Found {len(packages)} packages across all routers\")\n\n    for package in packages:\n        print(f\"- {package['name']} ({package['router_name']}): {package['speed_display']} for {package['duration_display']} at {package['price']} KES\")\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/routers/packages/', {\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;'\n    }\n});\n\nif (response.ok) {\n    const packages = await response.json();\n    console.log(`Found ${packages.length} packages across all routers`);\n\n    packages.forEach(package =&gt; {\n        console.log(`- ${package.name} (${package.router_name}): ${package.speed_display} for ${package.duration_display} at ${package.price} KES`);\n    });\n}\n</code></pre>"},{"location":"packages/#error-handling","title":"Error Handling","text":""},{"location":"packages/#http-status-codes","title":"HTTP Status Codes","text":"Status Description Common Causes 200 OK Request successful Valid request with packages found 401 Unauthorized Authentication required Missing or invalid JWT token 404 Not Found Router not found Invalid router ID or access denied 500 Internal Server Error Server error Database or system issues"},{"location":"packages/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n    \"error\": \"Detailed error description\"\n}\n</code></pre>"},{"location":"packages/#common-error-scenarios","title":"Common Error Scenarios","text":""},{"location":"packages/#authentication-errors","title":"Authentication Errors","text":"<p><pre><code>{\n    \"detail\": \"Authentication credentials were not provided.\"\n}\n</code></pre> Solution: Include valid JWT token in Authorization header</p>"},{"location":"packages/#router-not-found","title":"Router Not Found","text":"<p><pre><code>{\n    \"error\": \"Router not found or access denied\"\n}\n</code></pre> Solution: Verify router ID and ensure user has access</p>"},{"location":"packages/#no-packages-available","title":"No Packages Available","text":"<p><pre><code>{\n    \"router_id\": 1,\n    \"router_name\": \"Office Router\",\n    \"packages\": [],\n    \"message\": \"Found 0 active packages for Office Router\"\n}\n</code></pre> Solution: This is not an error - router exists but has no active packages</p>"},{"location":"packages/#package-validation-errors","title":"Package Validation Errors","text":"<p><pre><code>{\n    \"name\": [\n        \"A package with name 'Basic Hourly' already exists for this router.\"\n    ],\n    \"price\": [\n        \"Price must be greater than 0.\"\n    ],\n    \"download_speed_mbps\": [\n        \"Download speed must be greater than 0.\"\n    ],\n    \"upload_speed_mbps\": [\n        \"Upload speed must be greater than 0.\"\n    ],\n    \"duration_hours\": [\n        \"Duration must be greater than 0.\"\n    ]\n}\n</code></pre> Solution: Fix validation errors in the request data</p>"},{"location":"packages/#package-not-found","title":"Package Not Found","text":"<p><pre><code>{\n    \"error\": \"Package not found or access denied\"\n}\n</code></pre> Solution: Verify package ID and ensure user owns the router it belongs to</p>"},{"location":"packages/#router-access-denied-package-creationupdate","title":"Router Access Denied (Package Creation/Update)","text":"<p><pre><code>{\n    \"error\": \"Router not found or access denied\"\n}\n</code></pre> Solution: Ensure the router ID in the request belongs to the authenticated user</p>"},{"location":"packages/#security-features","title":"Security Features","text":""},{"location":"packages/#access-control","title":"Access Control","text":"<ul> <li>JWT Authentication: Secure token-based authentication</li> <li>User Isolation: Users can only access packages for their own routers</li> <li>Router Validation: Verifies router ownership before package access</li> </ul>"},{"location":"packages/#data-protection","title":"Data Protection","text":"<ul> <li>No Sensitive Data: Package endpoints don't expose sensitive information</li> <li>Input Validation: All parameters are validated and sanitized</li> <li>SQL Injection Protection: Django ORM provides built-in protection</li> </ul>"},{"location":"packages/#integration-examples","title":"Integration Examples","text":""},{"location":"packages/#frontend-integration","title":"Frontend Integration","text":""},{"location":"packages/#react-component-example","title":"React Component Example","text":"<pre><code>import React, { useState, useEffect } from 'react';\n\nconst PackageList = ({ routerId, token }) =&gt; {\n    const [packages, setPackages] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() =&gt; {\n        const fetchPackages = async () =&gt; {\n            try {\n                const response = await fetch(`/routers/${routerId}/packages/`, {\n                    headers: {\n                        'Authorization': `Bearer ${token}`\n                    }\n                });\n\n                if (response.ok) {\n                    const data = await response.json();\n                    setPackages(data.packages);\n                } else {\n                    setError('Failed to fetch packages');\n                }\n            } catch (err) {\n                setError('Network error');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchPackages();\n    }, [routerId, token]);\n\n    if (loading) return &lt;div&gt;Loading packages...&lt;/div&gt;;\n    if (error) return &lt;div&gt;Error: {error}&lt;/div&gt;;\n\n    return (\n        &lt;div className=\"package-list\"&gt;\n            &lt;h3&gt;Available Packages&lt;/h3&gt;\n            {packages.map(package =&gt; (\n                &lt;div key={package.id} className=\"package-card\"&gt;\n                    &lt;h4&gt;{package.name}&lt;/h4&gt;\n                    &lt;p&gt;Speed: {package.speed_display}&lt;/p&gt;\n                    &lt;p&gt;Duration: {package.duration_display}&lt;/p&gt;\n                    &lt;p&gt;Price: {package.price} {package.currency}&lt;/p&gt;\n                    &lt;p&gt;{package.description}&lt;/p&gt;\n                &lt;/div&gt;\n            ))}\n        &lt;/div&gt;\n    );\n};\n\nexport default PackageList;\n</code></pre>"},{"location":"packages/#troubleshooting","title":"Troubleshooting","text":""},{"location":"packages/#common-issues","title":"Common Issues","text":""},{"location":"packages/#empty-package-list","title":"Empty Package List","text":"<ul> <li>Cause: Router has no active packages</li> <li>Solution: Check admin interface for package status</li> </ul>"},{"location":"packages/#authentication-errors_1","title":"Authentication Errors","text":"<ul> <li>Cause: Expired or invalid JWT token</li> <li>Solution: Re-authenticate and get new token</li> </ul>"},{"location":"packages/#router-access-denied","title":"Router Access Denied","text":"<ul> <li>Cause: User doesn't own the router</li> <li>Solution: Verify router ownership and user permissions</li> </ul>"},{"location":"packages/#debug-tips","title":"Debug Tips","text":"<ol> <li>Check JWT Token: Ensure token is valid and not expired</li> <li>Verify Router ID: Confirm router exists and belongs to user</li> <li>Check Package Status: Ensure packages are marked as active</li> <li>Review Logs: Check Django logs for detailed error information</li> </ol>"},{"location":"packages/#database-relationships","title":"Database Relationships","text":"<pre><code>Package (1) \u2190\u2192 (1) Router\nPackage (1) \u2190\u2192 (N) Payment\n</code></pre>"},{"location":"packages/#router-relationship","title":"Router Relationship","text":"<ul> <li>Each package belongs to exactly one router</li> <li>Router can have multiple packages</li> <li>Package names must be unique per router</li> </ul>"},{"location":"packages/#payment-relationship","title":"Payment Relationship","text":"<ul> <li>Each payment references one package</li> <li>Package can have multiple payments</li> <li>Payment expiry is calculated from package duration</li> </ul>"},{"location":"packages/#database-indexes","title":"Database Indexes","text":""},{"location":"packages/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Router + Status: Fast filtering by router and active status</li> <li>Package Type + Price: Efficient package listing</li> <li>Created/Updated: Time-based queries</li> </ul>"},{"location":"packages/#best-practices","title":"Best Practices","text":""},{"location":"packages/#package-design","title":"Package Design","text":""},{"location":"packages/#naming-convention","title":"Naming Convention","text":"<ul> <li>Clear Names: \"Basic Hourly\", \"Premium Monthly\"</li> <li>Descriptive: Include speed or duration hints</li> <li>Consistent: Use similar naming across routers</li> </ul>"},{"location":"packages/#speed-tiers","title":"Speed Tiers","text":"<ul> <li>Entry Level: 5-10 Mbps for basic browsing</li> <li>Standard: 25-50 Mbps for streaming and downloads</li> <li>Premium: 100+ Mbps for heavy usage</li> <li>Enterprise: 1+ Gbps for business needs</li> </ul>"},{"location":"packages/#pricing-strategy_1","title":"Pricing Strategy","text":"<ul> <li>Competitive: Research local market rates</li> <li>Tiered: Higher speeds command premium prices</li> <li>Bulk Discounts: Monthly packages offer better value</li> </ul>"},{"location":"packages/#router-management","title":"Router Management","text":""},{"location":"packages/#package-distribution","title":"Package Distribution","text":"<ul> <li>Even Distribution: Offer similar packages across routers</li> <li>Local Customization: Adjust pricing for local markets</li> <li>Seasonal Packages: Special offers for peak usage periods</li> </ul>"},{"location":"packages/#quality-control","title":"Quality Control","text":"<ul> <li>Speed Testing: Verify actual speeds match advertised</li> <li>Customer Feedback: Monitor satisfaction and usage patterns</li> <li>Regular Updates: Adjust packages based on demand</li> </ul>"},{"location":"packages/#troubleshooting_1","title":"Troubleshooting","text":""},{"location":"packages/#common-issues_1","title":"Common Issues","text":""},{"location":"packages/#package-not-visible","title":"Package Not Visible","text":"<ul> <li>Check if package is marked as active</li> <li>Verify router association</li> <li>Ensure package hasn't expired</li> </ul>"},{"location":"packages/#speed-mismatch","title":"Speed Mismatch","text":"<ul> <li>Confirm speed limits are set correctly</li> <li>Check router configuration</li> <li>Verify customer device capabilities</li> </ul>"},{"location":"packages/#pricing-errors","title":"Pricing Errors","text":"<ul> <li>Ensure price is above minimum (KES 0.01)</li> <li>Check decimal places (maximum 2)</li> <li>Verify currency is KES</li> </ul>"},{"location":"packages/#admin-tips","title":"Admin Tips","text":""},{"location":"packages/#package-creation","title":"Package Creation","text":"<ul> <li>Start with basic packages and expand</li> <li>Test packages before making them active</li> <li>Monitor usage patterns for optimization</li> </ul>"},{"location":"packages/#maintenance","title":"Maintenance","text":"<ul> <li>Regularly review and update packages</li> <li>Deactivate unused packages</li> <li>Archive old packages for reference</li> </ul>"},{"location":"packages/#support","title":"Support","text":"<p>For additional help with package management:</p> <ol> <li>Admin Interface: Use the Django admin for package operations</li> <li>API Integration: Use the Package API for programmatic access</li> <li>Database Queries: Direct database access for complex operations</li> <li>Documentation: Refer to Package API documentation for endpoints</li> </ol>"},{"location":"packages/#related-documentation","title":"Related Documentation","text":"<ul> <li>Router API: Router management and operations including package endpoints</li> <li>Payment Transactions: Payment processing and tracking</li> <li>API Reference: Complete API endpoint reference</li> </ul>"},{"location":"payment-credentials/","title":"Payment Credentials API","text":"<p>The Payment Credentials API allows users to securely store and manage their payment provider API credentials for Kopokopo and InstaSend. Private keys are encrypted using the project's encryption key for enhanced security.</p>"},{"location":"payment-credentials/#features","title":"Features","text":"<ul> <li>Secure Storage: Private keys are encrypted using Fernet encryption</li> <li>Multiple Providers: Support for Kopokopo and InstaSend with more to be added</li> <li>Environment Support: Sandbox and Live environments</li> <li>Verification: Hash-based verification of private keys</li> <li>Status Management: Activate/deactivate credentials as needed</li> </ul>"},{"location":"payment-credentials/#authentication","title":"Authentication","text":"<p>All endpoints require JWT authentication. Include the JWT token in the Authorization header:</p> <pre><code>Authorization: Bearer &lt;your_jwt_token&gt;\n</code></pre>"},{"location":"payment-credentials/#endpoints","title":"Endpoints","text":""},{"location":"payment-credentials/#1-listcreate-payment-credentials","title":"1. List/Create Payment Credentials","text":""},{"location":"payment-credentials/#get-paymentscredentials","title":"GET /payments/credentials/","text":"<p>List all payment credentials for the authenticated user.</p> <p>Response: <pre><code>[\n    {\n        \"id\": 1,\n        \"provider\": \"kopokopo\",\n        \"provider_display\": \"KopoKopo\",\n        \"environment\": \"sandbox\",\n        \"is_active\": true,\n        \"created_at\": \"2024-01-15T10:30:00Z\",\n        \"updated_at\": \"2024-01-15T10:30:00Z\",\n        \"is_live\": false,\n        \"is_sandbox\": true\n    }\n]\n</code></pre></p>"},{"location":"payment-credentials/#post-paymentscredentials","title":"POST /payments/credentials/","text":"<p>Create new payment credentials.</p> <p>Request Body: <pre><code>{\n    \"provider\": \"kopokopo\",\n    \"api_key\": \"pk_test_kopokopo_1234567890abcdef\",\n    \"private_key\": \"sk_test_kopokopo_0987654321fedcba\",\n    \"environment\": \"sandbox\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n    \"id\": 1,\n    \"provider\": \"kopokopo\",\n    \"provider_display\": \"KopoKopo\",\n    \"environment\": \"sandbox\",\n    \"is_active\": true,\n    \"created_at\": \"2024-01-15T10:30:00Z\",\n    \"updated_at\": \"2024-01-15T10:30:00Z\",\n    \"is_live\": false,\n    \"is_sandbox\": true\n}\n</code></pre></p>"},{"location":"payment-credentials/#2-manage-specific-credentials","title":"2. Manage Specific Credentials","text":""},{"location":"payment-credentials/#get-paymentscredentialsid","title":"GET /payments/credentials/{id}/","text":"<p>Retrieve specific payment credentials.</p>"},{"location":"payment-credentials/#put-paymentscredentialsid","title":"PUT /payments/credentials/{id}/","text":"<p>Update payment credentials (excluding private key).</p> <p>Request Body: <pre><code>{\n    \"api_key\": \"pk_test_kopokopo_new_key_12345\",\n    \"environment\": \"live\"\n}\n</code></pre></p>"},{"location":"payment-credentials/#delete-paymentscredentialsid","title":"DELETE /payments/credentials/{id}/","text":"<p>Delete payment credentials.</p> <p>Response: <pre><code>{\n    \"message\": \"Payment credentials for KopoKopo have been successfully deleted\"\n}\n</code></pre></p>"},{"location":"payment-credentials/#3-private-key-management","title":"3. Private Key Management","text":""},{"location":"payment-credentials/#post-paymentscredentialsidupdate-private-key","title":"POST /payments/credentials/{id}/update-private-key/","text":"<p>Update the private key for existing credentials.</p> <p>Request Body: <pre><code>{\n    \"private_key\": \"sk_test_kopokopo_new_private_key_12345\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n    \"message\": \"Private key updated successfully\",\n    \"credentials\": {\n        \"id\": 1,\n        \"provider\": \"kopokopo\",\n        \"provider_display\": \"KopoKopo\",\n        \"environment\": \"sandbox\",\n        \"is_active\": true,\n        \"created_at\": \"2024-01-15T10:30:00Z\",\n        \"updated_at\": \"2024-01-15T10:35:00Z\",\n        \"is_live\": false,\n        \"is_sandbox\": true\n    }\n}\n</code></pre></p>"},{"location":"payment-credentials/#get-paymentscredentialsidget-private-key","title":"GET /payments/credentials/{id}/get-private-key/","text":"<p>Retrieve the decrypted private key for API usage.</p> <p>Response: <pre><code>{\n    \"credentials_id\": 1,\n    \"provider\": \"kopokopo\",\n    \"provider_display\": \"KopoKopo\",\n    \"private_key\": \"sk_test_kopokopo_0987654321fedcba\",\n    \"message\": \"Private key retrieved successfully\"\n}\n</code></pre></p>"},{"location":"payment-credentials/#4-verification-and-status","title":"4. Verification and Status","text":""},{"location":"payment-credentials/#post-paymentscredentialsidverify","title":"POST /payments/credentials/{id}/verify/","text":"<p>Verify credentials by checking the private key.</p> <p>Request Body: <pre><code>{\n    \"private_key\": \"sk_test_kopokopo_0987654321fedcba\"\n}\n</code></pre></p> <p>Response (Valid): <pre><code>{\n    \"credentials_id\": 1,\n    \"provider\": \"kopokopo\",\n    \"provider_display\": \"KopoKopo\",\n    \"is_valid\": true,\n    \"message\": \"Credentials verified successfully\"\n}\n</code></pre></p> <p>Response (Invalid): <pre><code>{\n    \"credentials_id\": 1,\n    \"provider\": \"kopokopo\",\n    \"provider_display\": \"KopoKopo\",\n    \"is_valid\": false,\n    \"message\": \"Invalid private key\"\n}\n</code></pre></p>"},{"location":"payment-credentials/#post-paymentscredentialsidtoggle-status","title":"POST /payments/credentials/{id}/toggle-status/","text":"<p>Toggle the active status of credentials.</p> <p>Response: <pre><code>{\n    \"message\": \"Payment credentials for KopoKopo have been deactivated\",\n    \"credentials\": {\n        \"id\": 1,\n        \"provider\": \"kopokopo\",\n        \"provider_display\": \"KopoKopo\",\n        \"environment\": \"sandbox\",\n        \"is_active\": false,\n        \"created_at\": \"2024-01-15T10:30:00Z\",\n        \"updated_at\": \"2024-01-15T10:40:00Z\",\n        \"is_live\": false,\n        \"is_sandbox\": true\n    }\n}\n</code></pre></p>"},{"location":"payment-credentials/#5-provider-specific-queries","title":"5. Provider-Specific Queries","text":""},{"location":"payment-credentials/#get-paymentscredentialsproviderprovider","title":"GET /payments/credentials/provider/{provider}/","text":"<p>Get credentials for a specific provider.</p> <p>Response: <pre><code>{\n    \"id\": 1,\n    \"provider\": \"kopokopo\",\n    \"provider_display\": \"KopoKopo\",\n    \"environment\": \"sandbox\",\n    \"is_active\": true,\n    \"created_at\": \"2024-01-15T10:30:00Z\",\n    \"updated_at\": \"2024-01-15T10:30:00Z\",\n    \"is_live\": false,\n    \"is_sandbox\": true\n}\n</code></pre></p>"},{"location":"payment-credentials/#code-examples","title":"Code Examples","text":""},{"location":"payment-credentials/#create-payment-credentials","title":"Create Payment Credentials","text":"cURLPythonJavaScript <pre><code># Login to get JWT token\nTOKEN=$(curl -s -X POST http://localhost:8000/users/login/ \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"your_username\", \"password\": \"your_password\"}' \\\n  | jq -r '.access_token')\n\n# Create Kopokopo credentials\ncurl -X POST http://localhost:8000/payments/credentials/ \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"provider\": \"kopokopo\",\n    \"api_key\": \"pk_test_kopokopo_1234567890abcdef\",\n    \"private_key\": \"sk_test_kopokopo_0987654321fedcba\",\n    \"environment\": \"sandbox\"\n  }'\n</code></pre> <pre><code>import requests\n\n# Login to get JWT token\nlogin_response = requests.post('http://localhost:8000/users/login/', {\n    'username': 'your_username',\n    'password': 'your_password'\n})\naccess_token = login_response.json()['access_token']\nheaders = {'Authorization': f'Bearer {access_token}'}\n\n# Create Kopokopo credentials\ncredentials_data = {\n    'provider': 'kopokopo',\n    'api_key': 'pk_test_kopokopo_1234567890abcdef',\n    'private_key': 'sk_test_kopokopo_0987654321fedcba',\n    'environment': 'sandbox'\n}\n\nresponse = requests.post(\n    'http://localhost:8000/payments/credentials/',\n    json=credentials_data,\n    headers=headers\n)\n\nif response.status_code == 201:\n    credentials_id = response.json()['id']\n    print(f\"Credentials created with ID: {credentials_id}\")\n</code></pre> <pre><code>// Login to get JWT token\nconst loginResponse = await fetch('http://localhost:8000/users/login/', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        username: 'your_username',\n        password: 'your_password'\n    })\n});\n\nconst { access_token } = await loginResponse.json();\nconst headers = {\n    'Authorization': `Bearer ${access_token}`,\n    'Content-Type': 'application/json'\n};\n\n// Create InstaSend credentials\nconst credentialsData = {\n    provider: 'instasend',\n    api_key: 'pk_test_instasend_1234567890abcdef',\n    private_key: 'sk_test_instasend_0987654321fedcba',\n    environment: 'sandbox'\n};\n\nconst response = await fetch('http://localhost:8000/payments/credentials/', {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(credentialsData)\n});\n\nif (response.ok) {\n    const credentials = await response.json();\n    console.log(`Credentials created with ID: ${credentials.id}`);\n}\n</code></pre>"},{"location":"payment-credentials/#list-payment-credentials","title":"List Payment Credentials","text":"cURLPythonJavaScript <pre><code>curl -X GET http://localhost:8000/payments/credentials/ \\\n  -H \"Authorization: Bearer $TOKEN\"\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\"\n}\n\nresponse = requests.get(\n    \"http://localhost:8000/payments/credentials/\",\n    headers=headers\n)\n\ncredentials = response.json()\nprint(f\"Found {len(credentials)} payment credentials\")\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/payments/credentials/', {\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;'\n    }\n});\n\nconst credentials = await response.json();\nconsole.log(`Found ${credentials.length} payment credentials`);\n</code></pre>"},{"location":"payment-credentials/#get-credentials-by-provider","title":"Get Credentials by Provider","text":"cURLPythonJavaScript <pre><code>curl -X GET http://localhost:8000/payments/credentials/provider/kopokopo/ \\\n  -H \"Authorization: Bearer $TOKEN\"\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\"\n}\n\nresponse = requests.get(\n    \"http://localhost:8000/payments/credentials/provider/kopokopo/\",\n    headers=headers\n)\n\ncredentials = response.json()\nprint(f\"Provider: {credentials['provider_display']}\")\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/payments/credentials/provider/kopokopo/', {\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;'\n    }\n});\n\nconst credentials = await response.json();\nconsole.log(`Provider: ${credentials.provider_display}`);\n</code></pre>"},{"location":"payment-credentials/#update-private-key","title":"Update Private Key","text":"cURLPythonJavaScript <pre><code>curl -X POST http://localhost:8000/payments/credentials/1/update-private-key/ \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"private_key\": \"sk_test_kopokopo_new_private_key_12345\"\n  }'\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\",\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    \"private_key\": \"sk_test_kopokopo_new_private_key_12345\"\n}\n\nresponse = requests.post(\n    \"http://localhost:8000/payments/credentials/1/update-private-key/\",\n    headers=headers,\n    json=data\n)\n\nresult = response.json()\nprint(f\"Update message: {result['message']}\")\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/payments/credentials/1/update-private-key/', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        private_key: 'sk_test_kopokopo_new_private_key_12345'\n    })\n});\n\nconst result = await response.json();\nconsole.log(`Update message: ${result.message}`);\n</code></pre>"},{"location":"payment-credentials/#verify-credentials","title":"Verify Credentials","text":"cURLPythonJavaScript <pre><code>curl -X POST http://localhost:8000/payments/credentials/1/verify/ \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"private_key\": \"sk_test_kopokopo_0987654321fedcba\"\n  }'\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\",\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    \"private_key\": \"sk_test_kopokopo_0987654321fedcba\"\n}\n\nresponse = requests.post(\n    \"http://localhost:8000/payments/credentials/1/verify/\",\n    headers=headers,\n    json=data\n)\n\nresult = response.json()\nprint(f\"Verification result: {result['is_valid']}\")\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/payments/credentials/1/verify/', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        private_key: 'sk_test_kopokopo_0987654321fedcba'\n    })\n});\n\nconst result = await response.json();\nconsole.log(`Verification result: ${result.is_valid}`);\n</code></pre>"},{"location":"payment-credentials/#get-decrypted-private-key","title":"Get Decrypted Private Key","text":"cURLPythonJavaScript <pre><code>curl -X GET http://localhost:8000/payments/credentials/1/get-private-key/ \\\n  -H \"Authorization: Bearer $TOKEN\"\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\"\n}\n\nresponse = requests.get(\n    \"http://localhost:8000/payments/credentials/1/get-private-key/\",\n    headers=headers\n)\n\nresult = response.json()\nprint(f\"Private key: {result['private_key']}\")\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/payments/credentials/1/get-private-key/', {\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;'\n    }\n});\n\nconst result = await response.json();\nconsole.log(`Private key: ${result.private_key}`);\n</code></pre>"},{"location":"payment-credentials/#toggle-credentials-status","title":"Toggle Credentials Status","text":"cURLPythonJavaScript <pre><code>curl -X POST http://localhost:8000/payments/credentials/1/toggle-status/ \\\n  -H \"Authorization: Bearer $TOKEN\"\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\"\n}\n\nresponse = requests.post(\n    \"http://localhost:8000/payments/credentials/1/toggle-status/\",\n    headers=headers\n)\n\nresult = response.json()\nprint(f\"Status message: {result['message']}\")\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/payments/credentials/1/toggle-status/', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;'\n    }\n});\n\nconst result = await response.json();\nconsole.log(`Status message: ${result.message}`);\n</code></pre>"},{"location":"payment-credentials/#update-credentials","title":"Update Credentials","text":"cURLPythonJavaScript <pre><code>curl -X PUT http://localhost:8000/payments/credentials/1/ \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"api_key\": \"pk_test_kopokopo_new_key_12345\",\n    \"environment\": \"live\"\n  }'\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\",\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    \"api_key\": \"pk_test_kopokopo_new_key_12345\",\n    \"environment\": \"live\"\n}\n\nresponse = requests.put(\n    \"http://localhost:8000/payments/credentials/1/\",\n    headers=headers,\n    json=data\n)\n\nresult = response.json()\nprint(f\"Updated environment: {result['environment']}\")\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/payments/credentials/1/', {\n    method: 'PUT',\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        api_key: 'pk_test_kopokopo_new_key_12345',\n        environment: 'live'\n    })\n});\n\nconst result = await response.json();\nconsole.log(`Updated environment: ${result.environment}`);\n</code></pre>"},{"location":"payment-credentials/#delete-credentials","title":"Delete Credentials","text":"cURLPythonJavaScript <pre><code>curl -X DELETE http://localhost:8000/payments/credentials/1/ \\\n  -H \"Authorization: Bearer $TOKEN\"\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\"\n}\n\nresponse = requests.delete(\n    \"http://localhost:8000/payments/credentials/1/\",\n    headers=headers\n)\n\nresult = response.json()\nprint(f\"Delete message: {result['message']}\")\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/payments/credentials/1/', {\n    method: 'DELETE',\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;'\n    }\n});\n\nconst result = await response.json();\nconsole.log(`Delete message: ${result.message}`);\n</code></pre>"},{"location":"payment-credentials/#security-features","title":"Security Features","text":""},{"location":"payment-credentials/#encryption","title":"Encryption","text":"<ul> <li>Private keys are encrypted using Fernet (symmetric encryption)</li> <li>Uses the project's <code>ENCRYPTION_KEY</code> from settings</li> <li>Encryption happens automatically when saving</li> </ul>"},{"location":"payment-credentials/#verification","title":"Verification","text":"<ul> <li>Private key hash is stored for verification</li> <li>Hash is SHA-256 for security</li> <li>Verification doesn't require decryption</li> </ul>"},{"location":"payment-credentials/#access-control","title":"Access Control","text":"<ul> <li>Users can only access their own credentials</li> <li>JWT authentication required for all endpoints</li> <li>Admin interface restricted to superusers</li> </ul>"},{"location":"payment-credentials/#error-handling","title":"Error Handling","text":""},{"location":"payment-credentials/#common-error-responses","title":"Common Error Responses","text":"<p>400 Bad Request: <pre><code>{\n    \"error\": \"Private key must be at least 10 characters long\"\n}\n</code></pre></p> <p>404 Not Found: <pre><code>{\n    \"error\": \"Payment credentials not found or access denied\"\n}\n</code></pre></p> <p>500 Internal Server Error: <pre><code>{\n    \"error\": \"Failed to decrypt private key: Invalid token\"\n}\n</code></pre></p>"},{"location":"payment-credentials/#database-schema","title":"Database Schema","text":"<p>The <code>PaymentCredentials</code> model includes:</p> <ul> <li><code>user</code>: Foreign key to User model</li> <li><code>provider</code>: Choice between 'kopokopo' and 'instasend'</li> <li><code>api_key</code>: Public API key (stored as plain text)</li> <li><code>encrypted_private_key</code>: Encrypted private key (BinaryField)</li> <li><code>private_key_hash</code>: SHA-256 hash for verification</li> <li><code>environment</code>: 'sandbox' or 'live'</li> <li><code>is_active</code>: Boolean status flag</li> <li><code>created_at</code> and <code>updated_at</code>: Timestamps</li> </ul>"},{"location":"payment-credentials/#testing","title":"Testing","text":"<p>Use the provided test script to verify functionality:</p> <pre><code>python test_payment_credentials.py\n</code></pre> <p>This script tests all endpoints and demonstrates the complete workflow for managing payment credentials.</p>"},{"location":"router-api/","title":"Router API Documentation","text":"<p>This document provides comprehensive information about the Router API endpoints for managing Mikrotik routers.</p>"},{"location":"router-api/#overview","title":"Overview","text":"<p>The Router API provides secure, user-specific router management capabilities. All data is stored in a single database with proper user isolation through filtering:</p> <ul> <li>Router CRUD Operations: Create, read, update, and delete routers</li> <li>Connection Testing: Verify router connectivity and update status</li> <li>Command Execution: Execute custom commands on Mikrotik devices</li> <li>Device Information: Retrieve comprehensive device details</li> <li>Package Management: View available WiFi packages for each router</li> <li>User Isolation: Users can only access their own routers</li> </ul>"},{"location":"router-api/#authentication","title":"Authentication","text":"<p>All router endpoints require authentication using JWT tokens obtained through login:</p>"},{"location":"router-api/#jwt-token-authentication","title":"JWT Token Authentication","text":"<pre><code>Authorization: Bearer &lt;your_jwt_token&gt;\n</code></pre> <p>How to get JWT tokens: 1. Username/Password: <code>POST /users/login/</code> 2. API Keys: <code>POST /users/api-key-login/</code> (requires both public and private keys)</p> <p>Security Note: JWT tokens provide secure, time-limited access to your routers and commands. Choose your preferred login method - both return the same JWT tokens.</p>"},{"location":"router-api/#database-structure","title":"Database Structure","text":""},{"location":"router-api/#router-model","title":"Router Model","text":"<pre><code>class Router(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='routers')\n    name = models.CharField(max_length=100)\n    host = models.CharField(max_length=255)  # IP or domain\n    port = models.PositiveIntegerField(default=80)\n    username = models.CharField(max_length=50)\n    encrypted_password = models.BinaryField()\n    use_https = models.BooleanField(default=False)\n    is_online = models.BooleanField(default=False)\n    last_checked = models.DateTimeField(null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n</code></pre>"},{"location":"router-api/#single-database-architecture","title":"Single Database Architecture","text":"<p>All data is stored in the default <code>db.sqlite3</code> database. User isolation is achieved through proper filtering in queries, ensuring users can only access their own data.</p>"},{"location":"router-api/#api-endpoints","title":"API Endpoints","text":""},{"location":"router-api/#router-management","title":"Router Management","text":""},{"location":"router-api/#listcreate-routers","title":"List/Create Routers","text":"<pre><code>GET/POST /routers/\n</code></pre> <p>GET: List all routers for the authenticated user POST: Create a new router</p> <p>POST Request Body: <pre><code>{\n    \"name\": \"Office Router\",\n    \"host\": \"192.168.1.1\",\n    \"port\": 80,\n    \"username\": \"admin\",\n    \"password\": \"your_password\",\n    \"use_https\": false\n}\n</code></pre></p> <p>Response: <pre><code>{\n    \"id\": 1,\n    \"name\": \"Office Router\",\n    \"host\": \"192.168.1.1\",\n    \"port\": 80,\n    \"username\": \"admin\",\n    \"use_https\": false,\n    \"is_online\": false,\n    \"last_checked\": null,\n    \"created_at\": \"2025-08-13T13:19:26Z\",\n    \"updated_at\": \"2025-08-13T13:19:26Z\"\n}\n</code></pre></p>"},{"location":"router-api/#router-details","title":"Router Details","text":"<pre><code>GET/PUT/DELETE /routers/{id}/\n</code></pre> <p>GET: Get router details PUT: Update router configuration DELETE: Remove router</p> <p>PUT Request Body: <pre><code>{\n    \"name\": \"Updated Router Name\",\n    \"host\": \"192.168.1.10\",\n    \"port\": 443,\n    \"username\": \"admin\",\n    \"password\": \"new_password\",\n    \"use_https\": true\n}\n</code></pre></p> <p>PUT Response: <pre><code>{\n    \"id\": 1,\n    \"name\": \"Updated Router Name\",\n    \"host\": \"192.168.1.10\",\n    \"port\": 443,\n    \"username\": \"admin\",\n    \"use_https\": true,\n    \"is_online\": false,\n    \"last_checked\": null,\n    \"created_at\": \"2025-08-13T13:19:26Z\",\n    \"updated_at\": \"2025-08-13T21:45:00Z\"\n}\n</code></pre></p> <p>DELETE Response: <pre><code>{\n    \"message\": \"Router \\\"Test Router\\\" has been successfully deleted\"\n}\n</code></pre></p>"},{"location":"router-api/#router-operations","title":"Router Operations","text":""},{"location":"router-api/#test-connection","title":"Test Connection","text":"<pre><code>POST /routers/{id}/test-connection/\n</code></pre> <p>Test router connectivity and update online status.</p> <p>Response: <pre><code>{\n    \"router_id\": 1,\n    \"is_online\": true,\n    \"message\": \"Connection test completed\"\n}\n</code></pre></p>"},{"location":"router-api/#execute-command","title":"Execute Command","text":"<pre><code>POST /routers/{id}/execute-command/\n</code></pre> <p>Execute custom commands on the Mikrotik router with support for different HTTP methods, query parameters, and request data.</p> <p>Request Body: <pre><code>{\n    \"command\": \"ip/hotspot\",\n    \"method\": \"GET\",\n    \"params\": {\n        \"?name\": \"hotspot1\"\n    }\n}\n</code></pre></p> <p>Enhanced Request Body (with data): <pre><code>{\n    \"command\": \"ip/hotspot/add\",\n    \"method\": \"POST\",\n    \"data\": {\n        \"name\": \"hotspot1\",\n        \"address-pool\": \"pool1\",\n        \"profile\": \"default\"\n    }\n}\n</code></pre></p> <p>Success Response: <pre><code>{\n    \"router_id\": 1,\n    \"command\": \"ip/hotspot\",\n    \"method\": \"GET\",\n    \"result\": [\n        {\n            \".id\": \"*1\",\n            \"name\": \"hotspot1\",\n            \"address-pool\": \"pool1\",\n            \"profile\": \"default\"\n        }\n    ],\n    \"message\": \"Command executed successfully\"\n}\n</code></pre></p> <p>Error Response: <pre><code>{\n    \"router_id\": 1,\n    \"command\": \"invalid/command\",\n    \"method\": \"GET\",\n    \"error\": \"Bad Request: no such command or directory (invalid)\",\n    \"status_code\": 400\n}\n</code></pre></p> <p>Supported HTTP Methods: - GET: Retrieve information (e.g., <code>ip/hotspot</code>, <code>system/resource</code>) - POST: Create new items (e.g., <code>ip/hotspot/add</code>, <code>ip/address/add</code>) - PUT: Update existing items (e.g., <code>ip/hotspot/set</code>) - DELETE: Remove items (e.g., <code>ip/hotspot/remove</code>)</p> <p>Parameters: - <code>command</code> (required): Mikrotik command path - <code>method</code> (optional): HTTP method (default: GET) - <code>params</code> (optional): Query parameters for GET requests - <code>data</code> (optional): JSON data for POST/PUT requests</p>"},{"location":"router-api/#get-device-info","title":"Get Device Info","text":"<pre><code>GET /routers/{id}/device-info/\n</code></pre> <p>Retrieve comprehensive device information.</p> <p>Response: <pre><code>{\n    \"router_id\": 1,\n    \"device_info\": {\n        \"identity\": \"MikroTik Router\",\n        \"cpu_load\": \"5%\",\n        \"free_memory\": \"52428800\",\n        \"total_memory\": \"134217728\",\n        \"free_hdd_space\": \"1073741824\",\n        \"total_hdd_space\": \"2147483648\",\n        \"version\": \"6.49.7\",\n        \"uptime\": \"2d 15:30:45\"\n    },\n    \"message\": \"Device information retrieved successfully\"\n}\n</code></pre></p>"},{"location":"router-api/#get-router-packages","title":"Get Router Packages","text":"<pre><code>GET /routers/{id}/packages/\n</code></pre> <p>Retrieve all active packages available for a specific router.</p> <p>Response: <pre><code>{\n    \"router_id\": 1,\n    \"router_name\": \"Office Router\",\n    \"packages\": [\n        {\n            \"id\": 1,\n            \"name\": \"Basic Hourly\",\n            \"package_type\": \"hourly\",\n            \"package_type_display\": \"Hourly Package\",\n            \"duration_hours\": 1,\n            \"duration_display\": \"1 hour\",\n            \"price\": \"2.50\",\n            \"currency\": \"KES\",\n            \"download_speed_mbps\": 10,\n            \"upload_speed_mbps\": 5,\n            \"download_speed_display\": \"10 Mbps\",\n            \"upload_speed_display\": \"5 Mbps\",\n            \"speed_display\": \"10 Mbps / 5 Mbps\",\n            \"description\": \"Basic internet access for 1 hour\",\n            \"is_active\": true\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Premium Monthly\",\n            \"package_type\": \"monthly\",\n            \"package_type_display\": \"Monthly Package\",\n            \"duration_hours\": 720,\n            \"duration_display\": \"1 month\",\n            \"price\": \"150.00\",\n            \"currency\": \"KES\",\n            \"download_speed_mbps\": 100,\n            \"upload_speed_mbps\": 50,\n            \"download_speed_display\": \"100 Mbps\",\n            \"upload_speed_display\": \"50 Mbps\",\n            \"speed_display\": \"100 Mbps / 50 Mbps\",\n            \"description\": \"High-speed internet for 1 month\",\n            \"is_active\": true\n        }\n    ],\n    \"message\": \"Found 2 active packages for Office Router\"\n}\n</code></pre></p>"},{"location":"router-api/#package-model-structure","title":"Package Model Structure","text":""},{"location":"router-api/#package-fields","title":"Package Fields","text":"<pre><code>class Package(models.Model):\n    name = models.CharField(max_length=100)                    # Package name\n    router = models.ForeignKey(Router)                        # Associated router\n    package_type = models.CharField(choices=PACKAGE_TYPES)    # hourly/monthly\n    duration_hours = models.PositiveIntegerField()            # Duration in hours\n    price = models.DecimalField()                             # Price in KES\n    download_speed_mbps = models.PositiveIntegerField()       # Download speed limit\n    upload_speed_mbps = models.PositiveIntegerField()         # Upload speed limit\n    description = models.TextField()                          # Package description\n    is_active = models.BooleanField()                         # Package availability\n    created_at = models.DateTimeField()                       # Creation timestamp\n    updated_at = models.DateTimeField()                       # Update timestamp\n</code></pre>"},{"location":"router-api/#package-types","title":"Package Types","text":"<ul> <li>Hourly Packages: Short-term access (1-24 hours)</li> <li>Monthly Packages: Long-term access (30 days = 720 hours)</li> </ul>"},{"location":"router-api/#speed-limits","title":"Speed Limits","text":"<ul> <li>Download Speed: Maximum download bandwidth in Mbps</li> <li>Upload Speed: Maximum upload bandwidth in Mbps</li> <li>Combined Display: Shows both speeds as \"Download / Upload\"</li> </ul>"},{"location":"router-api/#package-validation","title":"Package Validation","text":"<ul> <li>Package names must be unique per router</li> <li>Prices must be greater than 0.01</li> <li>Duration must be specified in hours</li> <li>Both download and upload speeds are required</li> </ul>"},{"location":"router-api/#usage-examples","title":"Usage Examples","text":""},{"location":"router-api/#create-a-router","title":"Create a Router","text":"cURLPythonJavaScript <pre><code>curl -X POST http://localhost:8000/routers/ \\\n  -H \"Authorization: Bearer &lt;your_jwt_token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Home Router\",\n    \"host\": \"192.168.1.1\",\n    \"username\": \"admin\",\n    \"password\": \"password123\"\n  }'\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\",\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    \"name\": \"Home Router\",\n    \"host\": \"192.168.1.1\",\n    \"username\": \"admin\",\n    \"password\": \"password123\"\n}\n\nresponse = requests.post(\n    \"http://localhost:8000/routers/\",\n    headers=headers,\n    json=data\n)\n\nprint(response.json())\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/routers/', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        name: 'Home Router',\n        host: '192.168.1.1',\n        username: 'admin',\n        password: 'password123'\n    })\n});\n\nconst result = await response.json();\nconsole.log(result);\n</code></pre>"},{"location":"router-api/#update-router-details","title":"Update Router Details","text":"cURLPythonJavaScript <pre><code>curl -X PUT http://localhost:8000/routers/1/ \\\n  -H \"Authorization: Bearer &lt;your_jwt_token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Updated Router Name\",\n    \"port\": 443,\n    \"use_https\": true\n  }'\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\",\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    \"name\": \"Updated Router Name\",\n    \"port\": 443,\n    \"use_https\": True\n}\n\nresponse = requests.put(\n    \"http://localhost:8000/routers/1/\",\n    headers=headers,\n    json=data\n)\n\nprint(response.json())\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/routers/1/', {\n    method: 'PUT',\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        name: 'Updated Router Name',\n        port: 443,\n        use_https: true\n    })\n});\n\nconst result = await response.json();\nconsole.log(result);\n</code></pre>"},{"location":"router-api/#list-routers","title":"List Routers","text":"cURLPythonJavaScript <pre><code>curl -X GET http://localhost:8000/routers/ \\\n  -H \"Authorization: Bearer &lt;your_jwt_token&gt;\"\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\"\n}\n\nresponse = requests.get(\n    \"http://localhost:8000/routers/\",\n    headers=headers\n)\n\nrouters = response.json()\nprint(f\"Found {len(routers)} routers\")\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/routers/', {\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;'\n    }\n});\n\nconst routers = await response.json();\nconsole.log(`Found ${routers.length} routers`);\n</code></pre>"},{"location":"router-api/#test-router-connection","title":"Test Router Connection","text":"cURLPythonJavaScript <pre><code>curl -X POST http://localhost:8000/routers/1/test-connection/ \\\n  -H \"Authorization: Bearer &lt;your_jwt_token&gt;\"\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\"\n}\n\nresponse = requests.post(\n    \"http://localhost:8000/routers/1/test-connection/\",\n    headers=headers\n)\n\nresult = response.json()\nprint(f\"Connection status: {result['is_online']}\")\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/routers/1/test-connection/', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;'\n    }\n});\n\nconst result = await response.json();\nconsole.log(`Connection status: ${result.is_online}`);\n</code></pre>"},{"location":"router-api/#get-device-information","title":"Get Device Information","text":"cURLPythonJavaScript <pre><code>curl -X GET http://localhost:8000/routers/1/device-info/ \\\n  -H \"Authorization: Bearer &lt;your_jwt_token&gt;\"\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\"\n}\n\nresponse = requests.get(\n    \"http://localhost:8000/routers/1/device-info/\",\n    headers=headers\n)\n\ndevice_info = response.json()\nprint(f\"Device: {device_info['device_info']['identity']}\")\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/routers/1/device-info/', {\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;'\n    }\n});\n\nconst device_info = await response.json();\nconsole.log(`Device: ${device_info.device_info.identity}`);\n</code></pre>"},{"location":"router-api/#get-router-packages_1","title":"Get Router Packages","text":"cURLPythonJavaScript <pre><code>curl -X GET http://localhost:8000/routers/1/packages/ \\\n  -H \"Authorization: Bearer &lt;your_jwt_token&gt;\"\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\"\n}\n\nresponse = requests.get(\n    \"http://localhost:8000/routers/1/packages/\",\n    headers=headers\n)\n\npackages = response.json()\nprint(f\"Found {len(packages['packages'])} packages for {packages['router_name']}\")\n\nfor package in packages['packages']:\n    print(f\"- {package['name']}: {package['speed_display']} for {package['duration_display']} at {package['price']} {package['currency']}\")\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/routers/1/packages/', {\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;'\n    }\n});\n\nconst packages = await response.json();\nconsole.log(`Found ${packages.packages.length} packages for ${packages.router_name}`);\n\npackages.packages.forEach(package =&gt; {\n    console.log(`- ${package.name}: ${package.speed_display} for ${package.duration_display} at ${package.price} ${package.currency}`);\n});\n</code></pre>"},{"location":"router-api/#execute-custom-commands","title":"Execute Custom Commands","text":"cURLPythonJavaScript <pre><code># Get hotspot information\ncurl -X POST http://localhost:8000/routers/1/execute-command/ \\\n  -H \"Authorization: Bearer &lt;your_jwt_token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"command\": \"ip/hotspot\",\n    \"method\": \"GET\"\n  }'\n\n# Get specific hotspot with query parameters\ncurl -X POST http://localhost:8000/routers/1/execute-command/ \\\n  -H \"Authorization: Bearer &lt;your_jwt_token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"command\": \"ip/hotspot\",\n    \"method\": \"GET\",\n    \"params\": {\n      \"?name\": \"hotspot1\"\n    }\n  }'\n\n# Create new hotspot\ncurl -X POST http://localhost:8000/routers/1/execute-command/ \\\n  -H \"Authorization: Bearer &lt;your_jwt_token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"command\": \"ip/hotspot/add\",\n    \"method\": \"POST\",\n    \"data\": {\n      \"name\": \"hotspot1\",\n      \"address-pool\": \"pool1\",\n      \"profile\": \"default\"\n    }\n  }'\n\n# Command that will fail\ncurl -X POST http://localhost:8000/routers/1/execute-command/ \\\n  -H \"Authorization: Bearer &lt;your_jwt_token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"command\": \"invalid/command\",\n    \"method\": \"GET\"\n  }'\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\",\n    \"Content-Type\": \"application/json\"\n}\n\n# Get hotspot information\ndata = {\n    \"command\": \"ip/hotspot\",\n    \"method\": \"GET\"\n}\n\nresponse = requests.post(\n    \"http://localhost:8000/routers/1/execute-command/\",\n    headers=headers,\n    json=data\n)\n\nif response.status_code == 200:\n    result = response.json()\n    print(f\"Hotspot info: {result['result']}\")\nelse:\n    error = response.json()\n    print(f\"Command failed: {error['error']}\")\n\n# Create new hotspot\ncreate_data = {\n    \"command\": \"ip/hotspot/add\",\n    \"method\": \"POST\",\n    \"data\": {\n        \"name\": \"hotspot1\",\n        \"address-pool\": \"pool1\",\n        \"profile\": \"default\"\n    }\n}\n\nresponse = requests.post(\n    \"http://localhost:8000/routers/1/execute-command/\",\n    headers=headers,\n    json=create_data\n)\n\nif response.status_code == 200:\n    result = response.json()\n    print(f\"Hotspot created: {result['result']}\")\nelse:\n    error = response.json()\n    print(f\"Creation failed: {error['error']}\")\n</code></pre> <pre><code>// Get hotspot information\nconst response = await fetch('http://localhost:8000/routers/1/execute-command/', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        command: 'ip/hotspot',\n        method: 'GET'\n    })\n});\n\nif (response.ok) {\n    const result = await response.json();\n    console.log(`Hotspot info: ${result.result}`);\n} else {\n    const error = await response.json();\n    console.log(`Command failed: ${error.error}`);\n}\n\n// Create new hotspot\nconst createResponse = await fetch('http://localhost:8000/routers/1/execute-command/', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        command: 'ip/hotspot/add',\n        method: 'POST',\n        data: {\n            name: 'hotspot1',\n            address_pool: 'pool1',\n            profile: 'default'\n        }\n    })\n});\n\nif (createResponse.ok) {\n    const result = await createResponse.json();\n    console.log(`Hotspot created: ${result.result}`);\n} else {\n    const error = await createResponse.json();\n    console.log(`Creation failed: ${error.error}`);\n}\n</code></pre> <p>Note: When a command fails on the Mikrotik router, the API returns a 400 status code with detailed error information from the router.</p>"},{"location":"router-api/#delete-router","title":"Delete Router","text":"cURLPythonJavaScript <pre><code>curl -X DELETE http://localhost:8000/routers/1/ \\\n  -H \"Authorization: Bearer &lt;your_jwt_token&gt;\"\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\"\n}\n\nresponse = requests.delete(\n    \"http://localhost:8000/routers/1/\",\n    headers=headers\n)\n\nresult = response.json()\nprint(f\"Delete message: {result['message']}\")\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/routers/1/', {\n    method: 'DELETE',\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;'\n    }\n});\n\nconst result = await response.json();\nconsole.log(`Delete message: ${result.message}`);\n</code></pre>"},{"location":"router-api/#error-handling","title":"Error Handling","text":"<p>The API provides comprehensive error handling with appropriate HTTP status codes:</p>"},{"location":"router-api/#400-bad-request","title":"400 Bad Request","text":"<p>Invalid input data or malformed requests.</p>"},{"location":"router-api/#401-unauthorized","title":"401 Unauthorized","text":"<p>Missing or invalid authentication credentials.</p>"},{"location":"router-api/#404-not-found","title":"404 Not Found","text":"<p>Router not found or access denied.</p>"},{"location":"router-api/#500-internal-server-error","title":"500 Internal Server Error","text":"<p>Server or Mikrotik API errors.</p> <p>Error Response Format: <pre><code>{\n    \"error\": \"Detailed error description\"\n}\n</code></pre></p>"},{"location":"router-api/#security-considerations","title":"Security Considerations","text":"<ol> <li>Encryption Key: Keep the encryption key secure and never commit it to version control</li> <li>User Isolation: Each user's data is isolated through proper database filtering</li> <li>Password Security: Router passwords are encrypted at rest</li> <li>Authentication: All endpoints require valid JWT tokens or dual API keys</li> <li>Input Validation: All inputs are validated and sanitized</li> </ol>"},{"location":"router-api/#troubleshooting","title":"Troubleshooting","text":""},{"location":"router-api/#common-issues","title":"Common Issues","text":"<ol> <li>Connection Failed: Check router IP, credentials, and network connectivity</li> <li>Encryption Error: Ensure ENCRYPTION_KEY is properly set in settings</li> <li>Permission Denied: Check JWT token validity and user authentication</li> <li>Router Not Found: Verify router ID and user ownership</li> </ol>"},{"location":"router-api/#debug-mode","title":"Debug Mode","text":"<p>Enable Django debug mode in <code>settings.py</code> for detailed error information during development.</p>"},{"location":"router-api/#performance-notes","title":"Performance Notes","text":"<ul> <li>Single Database: Efficient single database connection</li> <li>Proper Filtering: User data isolation through optimized queries</li> <li>Connection Pooling: Efficient Mikrotik API connection management</li> <li>Caching: Consider implementing caching for frequently accessed data</li> </ul>"},{"location":"router-api/#support","title":"Support","text":"<p>For additional help:</p> <ol> <li>Check Django logs for detailed error messages</li> <li>Verify router connectivity manually</li> <li>Ensure all dependencies are installed</li> <li>Check database configuration and migrations</li> <li>Review the API Reference for endpoint details</li> </ol>"},{"location":"router-api/#package-api","title":"Package API","text":"<p>This document provides comprehensive information about the Package API endpoints for managing WiFi internet packages.</p>"},{"location":"router-api/#overview_1","title":"Overview","text":"<p>The Package API provides secure access to package information and management capabilities. All endpoints require authentication and provide user-specific data access:</p> <ul> <li>Package Retrieval: Get available packages for specific routers</li> <li>Package Information: Detailed package data with speed limits and pricing</li> <li>Router Association: Packages are linked to specific routers</li> <li>User Isolation: Users can only access packages for their own routers</li> </ul>"},{"location":"router-api/#authentication_1","title":"Authentication","text":"<p>All package endpoints require authentication using JWT tokens obtained through login:</p>"},{"location":"router-api/#jwt-token-authentication_1","title":"JWT Token Authentication","text":"<pre><code>Authorization: Bearer &lt;your_jwt_token&gt;\n</code></pre> <p>How to get JWT tokens: 1. Username/Password: <code>POST /users/login/</code> 2. API Keys: <code>POST /users/api-key-login/</code> (requires both public and private keys)</p>"},{"location":"router-api/#api-endpoints_1","title":"API Endpoints","text":""},{"location":"router-api/#get-router-packages_2","title":"Get Router Packages","text":""},{"location":"router-api/#endpoint","title":"Endpoint","text":"<pre><code>GET /routers/{id}/packages/\n</code></pre>"},{"location":"router-api/#description","title":"Description","text":"<p>Retrieve all active packages available for a specific router. This endpoint returns comprehensive package information including speed limits, pricing, and duration details.</p>"},{"location":"router-api/#path-parameters","title":"Path Parameters","text":"<ul> <li><code>id</code> (integer, required): Router ID to get packages for</li> </ul>"},{"location":"router-api/#request-headers","title":"Request Headers","text":"<pre><code>Authorization: Bearer &lt;your_jwt_token&gt;\nContent-Type: application/json\n</code></pre>"},{"location":"router-api/#response-format","title":"Response Format","text":"<p>Success Response (200 OK): <pre><code>{\n    \"router_id\": 1,\n    \"router_name\": \"Office Router\",\n    \"packages\": [\n        {\n            \"id\": 1,\n            \"name\": \"Basic Hourly\",\n            \"package_type\": \"hourly\",\n            \"package_type_display\": \"Hourly Package\",\n            \"duration_hours\": 1,\n            \"duration_display\": \"1 hour\",\n            \"price\": \"2.50\",\n            \"currency\": \"KES\",\n            \"download_speed_mbps\": 10,\n            \"upload_speed_mbps\": 5,\n            \"download_speed_display\": \"10 Mbps\",\n            \"upload_speed_display\": \"5 Mbps\",\n            \"speed_display\": \"10 Mbps / 5 Mbps\",\n            \"description\": \"Basic internet access for 1 hour\",\n            \"is_active\": true\n        }\n    ],\n    \"message\": \"Found 1 active packages for Office Router\"\n}\n</code></pre></p>"},{"location":"router-api/#usage-examples_1","title":"Usage Examples","text":""},{"location":"router-api/#get-packages-for-a-router","title":"Get Packages for a Router","text":"cURLPythonJavaScript <pre><code>curl -X GET http://localhost:8000/routers/1/packages/ \\\n  -H \"Authorization: Bearer &lt;your_jwt_token&gt;\"\n</code></pre> <pre><code>import requests\n\nheaders = {\n    \"Authorization\": \"Bearer &lt;your_jwt_token&gt;\"\n}\n\nresponse = requests.get(\n    \"http://localhost:8000/routers/1/packages/\",\n    headers=headers\n)\n\nif response.status_code == 200:\n    packages = response.json()\n    print(f\"Found {len(packages['packages'])} packages for {packages['router_name']}\")\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/routers/1/packages/', {\n    headers: {\n        'Authorization': 'Bearer &lt;your_jwt_token&gt;'\n    }\n});\n\nif (response.ok) {\n    const packages = await response.json();\n    console.log(`Found ${packages.packages.length} packages for ${packages.router_name}`);\n}\n</code></pre>"},{"location":"router-api/#error-handling_1","title":"Error Handling","text":""},{"location":"router-api/#http-status-codes","title":"HTTP Status Codes","text":"Status Description Common Causes 200 OK Request successful Valid request with packages found 401 Unauthorized Authentication required Missing or invalid JWT token 404 Not Found Router not found Invalid router ID or access denied"},{"location":"router-api/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n    \"error\": \"Detailed error description\"\n}\n</code></pre>"},{"location":"router-api/#security-features","title":"Security Features","text":""},{"location":"router-api/#access-control","title":"Access Control","text":"<ul> <li>JWT Authentication: Secure token-based authentication</li> <li>User Isolation: Users can only access their own router packages</li> <li>Router Validation: Verifies router ownership before package access</li> </ul>"},{"location":"router-api/#related-documentation","title":"Related Documentation","text":"<ul> <li>Package Management: Comprehensive package management guide</li> <li>Router API: Router management and operations</li> <li>Authentication: JWT authentication system</li> <li>API Reference: Complete API endpoint reference</li> </ul>"},{"location":"setup-guide/","title":"Setup Guide","text":"<p>This guide will walk you through setting up the Mikrotik CloudPilot API on your system.</p>"},{"location":"setup-guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>pip (Python package installer)</li> <li>Git</li> </ul>"},{"location":"setup-guide/#installation","title":"Installation","text":""},{"location":"setup-guide/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone &lt;repository-url&gt;\ncd Mikrotik-CloudPilotAPI\n</code></pre>"},{"location":"setup-guide/#2-create-virtual-environment","title":"2. Create Virtual Environment","text":"<pre><code>python -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n</code></pre>"},{"location":"setup-guide/#3-install-dependencies","title":"3. Install Dependencies","text":"<pre><code>pip install -r requirements.txt\npip install -r requirements-docs.txt\n</code></pre>"},{"location":"setup-guide/#4-generate-encryption-key","title":"4. Generate Encryption Key","text":"<p>Generate a secure encryption key for router passwords:</p> <pre><code>python manage.py generate_encryption_key\n</code></pre> <p>Copy the generated key and update <code>mikrotik_cloudpilot/settings.py</code>:</p> <pre><code>ENCRYPTION_KEY = b'your-generated-key-here'\n</code></pre>"},{"location":"setup-guide/#5-run-database-migrations","title":"5. Run Database Migrations","text":"<pre><code>python manage.py migrate\n</code></pre>"},{"location":"setup-guide/#6-create-a-superuser-optional","title":"6. Create a Superuser (Optional)","text":"<pre><code>python manage.py createsuperuser\n</code></pre>"},{"location":"setup-guide/#configuration","title":"Configuration","text":""},{"location":"setup-guide/#environment-variables","title":"Environment Variables","text":"<p>The application automatically configures: - Single database architecture - Encryption key for router passwords - User authentication and isolation</p>"},{"location":"setup-guide/#database-architecture","title":"Database Architecture","text":"<ul> <li>Single Database: All data stored in <code>db.sqlite3</code></li> <li>User Isolation: Achieved through proper database filtering</li> <li>Standard Django Patterns: Uses Django's built-in ForeignKey relationships</li> </ul>"},{"location":"setup-guide/#starting-the-application","title":"Starting the Application","text":""},{"location":"setup-guide/#1-start-django-server","title":"1. Start Django Server","text":"<pre><code>python manage.py runserver 8000\n</code></pre> <p>The API will be available at <code>http://localhost:8000/</code></p>"},{"location":"setup-guide/#2-start-documentation-server","title":"2. Start Documentation Server","text":"<p>In another terminal:</p> <pre><code>mkdocs serve -a 127.0.0.1:8001\n</code></pre> <p>Documentation will be available at <code>http://127.0.0.1:8001/</code></p>"},{"location":"setup-guide/#testing-the-setup","title":"Testing the Setup","text":""},{"location":"setup-guide/#1-check-api-health","title":"1. Check API Health","text":"<pre><code>curl http://localhost:8000/admin/\n</code></pre>"},{"location":"setup-guide/#2-register-a-test-user","title":"2. Register a Test User","text":"<pre><code>curl -X POST http://localhost:8000/users/register/ \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"username\": \"testuser\",\n    \"email\": \"test@example.com\",\n    \"password\": \"testpass123\"\n  }'\n</code></pre>"},{"location":"setup-guide/#3-test-router-endpoints","title":"3. Test Router Endpoints","text":"<p>Use the generated API keys to test router management:</p> <pre><code># List routers (will be empty initially)\ncurl -X GET http://localhost:8000/routers/ \\\n  -H \"X-API-Key: &lt;your_public_key&gt;\" \\\n  -H \"X-Private-Key: &lt;your_private_key&gt;\"\n</code></pre>"},{"location":"setup-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"setup-guide/#common-issues","title":"Common Issues","text":""},{"location":"setup-guide/#1-authentication-errors","title":"1. Authentication Errors","text":"<p>If you see authentication errors:</p> <pre><code># Check if user exists and has API keys\npython manage.py shell -c \"from django.contrib.auth.models import User; from users.models import APIKey; user = User.objects.get(username='testuser'); print(f'User: {user.username}'); print(f'API Key: {user.api_key.public_key if hasattr(user, \\\"api_key\\\") else \\\"None\\\"}')\"\n</code></pre>"},{"location":"setup-guide/#2-database-errors","title":"2. Database Errors","text":"<p>If you see database errors:</p> <pre><code># Check database status\npython manage.py check\npython manage.py showmigrations\n</code></pre>"},{"location":"setup-guide/#3-encryption-errors","title":"3. Encryption Errors","text":"<p>If you see encryption errors:</p> <pre><code># Verify encryption key is set\npython manage.py shell -c \"from django.conf import settings; print(f'Encryption key set: {hasattr(settings, \\\"ENCRYPTION_KEY\\\")}')\"\n</code></pre>"},{"location":"setup-guide/#debug-mode","title":"Debug Mode","text":"<p>Enable Django debug mode in <code>settings.py</code> for detailed error information during development:</p> <pre><code>DEBUG = True\n</code></pre>"},{"location":"setup-guide/#next-steps","title":"Next Steps","text":"<p>After successful setup:</p> <ol> <li>Explore the API: Use the interactive documentation at <code>http://127.0.0.1:8001/</code></li> <li>Create Routers: Add your Mikrotik routers through the API</li> <li>Test Connections: Verify router connectivity</li> <li>Execute Commands: Try custom commands on your routers</li> </ol>"},{"location":"setup-guide/#support","title":"Support","text":"<p>For additional help:</p> <ol> <li>Check the API Reference for endpoint details</li> <li>Review the Router API for router-specific operations</li> <li>Check Django logs for detailed error messages</li> <li>Verify all dependencies are properly installed</li> </ol>"}]}